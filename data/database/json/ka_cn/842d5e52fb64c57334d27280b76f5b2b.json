{"title": "Fast MTCNN detector (~55 FPS at full resolution)", "description": "Fast MTCNN detectorThis notebook demonstrates how to achieve 45 frames per second speeds for loading frames and detecting faces on full resolution videos. AlgorithmStriding: The algorithm used is a strided modification of MTCNN in which face detection is performed on only every N frames, and applied to all frames. For example, with a batch of 9 frames, we could pass frames 0, 3, and 6 to MTCNN. Then, the bounding boxes (and potentially landmarks) returned for frame 0 would be naively applied to frames 1 and 2. Similarly, the detections for frame 3 are applied to frames 4 and 5, and the detections for frames 6 are applied to frames 7 and 8. Although this assume that faces do not move between frames significantly, this is generally a good approximation for low stride numbers. If the stride is 3, we are assuming that the face does not significantly alter position for an additional 2 frames, or ~0.07 seconds. If faces are moving faster than this, they are likely to be extremely blurry anyway. Furthermore, ensuring that faces are cropped with a small margin mitigates the impact of face drift. Scale pyramid: The algorithm uses a slightly smaller scaling factor (0.6 vs 0.709) than the original MTCNN algorithm to construct the scaling pyramid applied to input images. For details of the scaling pyramid, see the original paper for details of the scaling pyramid approach. Multi-threading: A modest performance gain comes from loading video frames (with cv2.VideoCapture) using threading. This functionality is provided by the FileVideoStream class of the imutils package. Other resourcesSee the following kernel for a guide to using the MTCNN functionality of facenet-pytorch: https://www.kaggle.com/timesler/guide-to-mtcnn-in-facenet-pytorch", "link": "https://www.kaggle.com/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["pytorch", "imutils"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-02-25 06:37:56", "date_scraped": "2020-12-12 18:44:56", "words": 275, "sentences": 14, "sum_nltk": "Fast MTCNN detectorThis notebook demonstrates how to achieve 45 frames per second speeds for loading frames and detecting faces on full resolution videos.\nAlgorithmStriding: The algorithm used is a strided modification of MTCNN in which face detection is performed on only every N frames, and applied to all frames.\nFor example, with a batch of 9 frames, we could pass frames 0, 3, and 6 to MTCNN.\nThen, the bounding boxes (and potentially landmarks) returned for frame 0 would be naively applied to frames 1 and 2.\nAlthough this assume that faces do not move between frames significantly, this is generally a good approximation for low stride numbers.\nIf the stride is 3, we are assuming that the face does not significantly alter position for an additional 2 frames, or ~0.07 seconds.\nScale pyramid: The algorithm uses a slightly smaller scaling factor (0.6 vs 0.709) than the original MTCNN algorithm to construct the scaling pyramid applied to input images.\nMulti-threading: A modest performance gain comes from loading video frames (with cv2.VideoCapture) using threading.\nThis functionality is provided by the FileVideoStream class of the imutils package.\nOther resourcesSee the following kernel for a guide to using the MTCNN functionality of facenet-pytorch: https://www.kaggle.com/timesler/guide-to-mtcnn-in-facenet-pytorch", "sum_nltk_words": 192, "sum_nltk_runtime": 0.003, "sum_t5": "a notebook demonstrates how to achieve 45 frames per second speeds. the algorithm used is a strided modification of the original MTCNN algorithm. the algorithm uses a slightly smaller scaling factor (0.6 vs 0.709) than the original MTCNN algorithm. a modest performance gain comes from loading video frames using threading. the kernel for a guide to using the MTCNN functionality of facenet-pytorch is at http://www.kaggle.com/timesler", "sum_t5_words": 65, "sum_t5_runtime": 6.603, "runtime": 0.002, "nltk_category": "Utilities", "nltk_category_score": 0.4984479546546936, "nltk_category_runtime": 21.441, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.8216800689697266, "nltk_subcategory_runtime": 34.053, "category": "Utilities", "category_score": 0.4984479546546936, "subcategory": "Machine Learning", "subcategory_score": 0.8216800689697266, "runtime_cat": 55.494, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.763", "language_code": "en", "language_score": "0.9999960844595358", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "fast mtcnn detectorthis notebook demonstrates achieve 45 frame per second speed loading frame detecting face full resolution video algorithmstriding algorithm used strided modification mtcnn face detection performed every n frame applied frame example batch 9 frame could pas frame 0 3 6 mtcnn bounding box potentially landmark returned frame 0 would naively applied frame 1 2 similarly detection frame 3 applied frame 4 5 detection frame 6 applied frame 7 8 although assume face move frame significantly generally good approximation low stride number stride 3 assuming face significantly alter position additional 2 frame 007 second face moving faster likely extremely blurry anyway furthermore ensuring face cropped small margin mitigates impact face drift scale pyramid algorithm us slightly smaller scaling factor 06 v 0709 original mtcnn algorithm construct scaling pyramid applied input image detail scaling pyramid see original paper detail scaling pyramid approach multithreading modest performance gain come loading video frame cv2videocapture using threading functionality provided filevideostream class imutils package resourcessee following kernel guide using mtcnn functionality facenetpytorch httpswwwkagglecomtimeslerguidetomtcnninfacenetpytorch", "tags_descriptive": []}