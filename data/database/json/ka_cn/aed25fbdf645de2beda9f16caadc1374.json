{"title": "lyft3d inference + Prediction Visualization", "description": "Updates 1 I have added code that does model prediction visualization by putting it in camera frame. I found this to be more intuitive than visualizing it in lidar frame. I hope you find it useful.  If you check out the reference model in lyft devkit, you will find that they are using map masks for training UNET. The map masks are first extracted around the corresponding ego region and used as 3 additional channels. This seems to be give some improvement in lb score. In this notebook i do inference using such a trained trained model. I have extracted the ego centered maps and made a train and test dataset. You can find it here. It takes a long time to compute on test set, so i am sharing it here :-D Updates 2I have added code that shows how you can easily ensemble your models. Here, I use same models at different epochs of training. Even such a simple approach gives a slight boost. To get a bigger boost, you can try training models with different architectures. Good Luck !", "link": "https://www.kaggle.com/meaninglesslives/lyft3d-inference-prediction-visualization", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-11-01 14:45:17", "date_scraped": "2020-12-12 16:08:01", "words": 183, "sentences": 14, "runtime": 0.002, "description_category": "Utilities", "description_category_score": 0.4734133183956146, "description_category_runtime": 14.589, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.9157386422157288, "description_subcategory_runtime": 23.245, "category": "Utilities", "category_score": 0.4734133183956146, "subcategory": "Machine Learning", "subcategory_score": 0.9157386422157288, "runtime_cat": 37.834, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.743", "language_code": "en", "language_score": "0.9999983294891326", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "update 1 added code model prediction visualization putting camera frame found intuitive visualizing lidar frame hope find useful check reference model lyft devkit find using map mask training unet map mask first extracted around corresponding ego region used 3 additional channel seems give improvement lb score notebook inference using trained trained model extracted ego centered map made train test dataset find take long time compute test set sharing update 2i added code show easily ensemble model use model different epoch training even simple approach give slight boost get bigger boost try training model different architecture good luck", "tags_descriptive": []}