{"title": "Cloud: ConvexHull& Polygon PostProcessing (No GPU)", "description": "IntroductionSince the mask we have in the labels are mostly in the rectangles (or combination of rectangles) shapes. It is interesting to see that if we post-process the random-shape masks of a segmentation model to rectangle, we can get improved performance or not? In this kernel, I show a simple way to post-process all masks to 4 choices of shapes : convex hull, approx. polygon, simple x-y rectangle and minimum-area rectangles. (credit : I took the starter code from bigsnarfdude : https://gist.github.com/bigsnarfdude/d811e31ee17495f82f10db12651ae82d ) The masks I will post-process came from my good friend Raman's great kernel : https://www.kaggle.com/samusram/cloud-classifier-for-post-processing (which is already post-process from other great kernel of Jan's https://www.kaggle.com/jpbremer/efficient-net-b4-unet-clouds :). The convex-hull post-processing currently is the best of 4 choices (not yet test polygon), still having the same LB score as original predicted masks, but with more reasonable shapes. Since this kernel does not need GPU, whenever you are run out of GPU quota you can come here just to have fun. I myself prepared this kernel when I was run out of GPU quota also :)  UPDATE on V2 :  Thanks to Ryan @ryches for his insightful suggestions. In V2, the mask touching the black stripe is removed. Additionally, this black-stripe removing process may cause some disconnect small triangle masks. Therefore, in V2, I also apply @artgor min_size remove post-processing. Now LB score improves from V1, but still not beat the original predicted masks (LB.655 vs. 650). Lastly, I add my own version of multi-color masks visualization just for fun.  UPDATE on V3 :  Now support the minimum convex-hull that enclosing the predicting mask. This convex-hull performs better than minimum-area rectangle, and got equal score to the original masks.  UPDATE V5.  Add approximate polygon post-processing using Douglas-Peucker algorithm.", "link": "https://www.kaggle.com/ratthachat/cloud-convexhull-polygon-postprocessing-no-gpu", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["opencv-python", "pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-09-23 13:11:40", "date_scraped": "2020-12-13 18:07:53", "words": 295, "sentences": 17, "sum_nltk": "IntroductionSince the mask we have in the labels are mostly in the rectangles (or combination of rectangles) shapes.\nIt is interesting to see that if we post-process the random-shape masks of a segmentation model to rectangle, we can get improved performance or not?\nIn this kernel, I show a simple way to post-process all masks to 4 choices of shapes : convex hull, approx.\npolygon, simple x-y rectangle and minimum-area rectangles.\nThe convex-hull post-processing currently is the best of 4 choices (not yet test polygon), still having the same LB score as original predicted masks, but with more reasonable shapes.\nI myself prepared this kernel when I was run out of GPU quota also :)  UPDATE on V2 :  Thanks to Ryan @ryches for his insightful suggestions.\nIn V2, the mask touching the black stripe is removed.\nAdditionally, this black-stripe removing process may cause some disconnect small triangle masks.\nNow LB score improves from V1, but still not beat the original predicted masks (LB.655 vs.\nUPDATE on V3 :  Now support the minimum convex-hull that enclosing the predicting mask.\nThis convex-hull performs better than minimum-area rectangle, and got equal score to the original masks.\nAdd approximate polygon post-processing using Douglas-Peucker algorithm.", "sum_nltk_words": 193, "sum_nltk_runtime": 0.004, "sum_t5": "a simple way to post-process the random-shape masks of a segmentation model to rectangles. the convex-hull post-processing currently is the best of 4 choices. the kernel does not need GPU, whenever you are run out of GPU quota you can come here just to have fun. if you want to see a better performance, check out the cd-rom. if you want to see a better performance, check out the cd-rom", "sum_t5_words": 70, "sum_t5_runtime": 6.898, "runtime": 0.0, "nltk_category": "Utilities", "nltk_category_score": 0.2881903350353241, "nltk_category_runtime": 20.253, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.7614380717277527, "nltk_subcategory_runtime": 32.042, "category": "Utilities", "category_score": 0.2881903350353241, "subcategory": "Machine Learning", "subcategory_score": 0.7614380717277527, "runtime_cat": 52.296, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.73", "language_code": "en", "language_score": "0.9999963860126442", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "introductionsince mask label mostly rectangle combination rectangle shape interesting see postprocess randomshape mask segmentation model rectangle get improved performance kernel show simple way postprocess mask 4 choice shape convex hull approx polygon simple xy rectangle minimumarea rectangle credit took starter code bigsnarfdude httpsgistgithubcombigsnarfduded811e31ee17495f82f10db12651ae82d mask postprocess came good friend ramans great kernel httpswwwkagglecomsamusramcloudclassifierforpostprocessing already postprocess great kernel jan httpswwwkagglecomjpbremerefficientnetb4unetclouds convexhull postprocessing currently best 4 choice yet test polygon still lb score original predicted mask reasonable shape since kernel need gpu whenever run gpu quota come fun prepared kernel run gpu quota also update v2 thanks ryan ryches insightful suggestion v2 mask touching black stripe removed additionally blackstripe removing process may cause disconnect small triangle mask therefore v2 also apply artgor min_size remove postprocessing lb score improves v1 still beat original predicted mask lb655 v 650 lastly add version multicolor mask visualization fun update v3 support minimum convexhull enclosing predicting mask convexhull performs better minimumarea rectangle got equal score original mask update v5 add approximate polygon postprocessing using douglaspeucker algorithm", "tags_descriptive": []}