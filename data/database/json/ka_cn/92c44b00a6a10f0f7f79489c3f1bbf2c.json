{"title": "NYCT - from A to Z with XGBoost (Tutorial)", "description": "An MVP Aproach  1. IntroductionAs a (admittedly lazy) Data Scientist I love accessing information in the easiest way possible. Google is my best friend, for example. With the exception of a few things, there is almost nothing you can't find with a simple search.This kernel is written and developed using IPython Notebook and XGBoost, with the aim of being ready-to-submit. By that I mean any user can run each code block, submit the output, and achieve a comfortable top-half score. Breaking into the top 10% of the submissions would require quite a bit more effort and a more sophisticated approach. In the final section I include some comments and suggestions of some alterations/variations one might try to improve the score. Those suggestions, if carried out correctly, do result in a strong score on the leaderboard. This then serves as an introductory tutorial to approaching this particular problem (rather than giving the best solution outright) leaving enough room for creativity and innovation in the solution space to allow any user to better the end result. In short, the whole project is about LEARNING, sharing some ideas, and ultimately improving the degree of Data Scientists out there.  Enjoy!  1.1 The Problem  New York is riddled with one-ways, small side streets, and an almost incalculable amount of pedestrians at any given point in time. Not to mention the amount of cars/motorcycles/bicycles clogging up the roads. Combine this with a mad rush to get from point A to point B, and you'll find yourself late for whatever you need to be on time for.The solution to getting from A to B when living in a city like New York (without losing your mind) is easy: take a taxi/Uber/Lyft/etc. You don't need to stress about the traffic or pedestrians and you have a moment to do something else, like catch up on emails. Although this sounds simple enough, it doesn't mean you'll get to your destination in time. So you need to have your driver take the shortest trip possible. By shortest, we're talking time. If a route A is X kilometers *longer*, but gets you there Y minutes *faster* than route B would, rather take that one.To know which route is the best one to take, we need to be able to predict how long the trip will last when taking a specific route. Therefore, *the goal of this playground competition is to predict the the duration of each trip in the test data set, given start and end coordinates.* 1.2 The Libraries & Functions  Using Python 3.6.1, import the following libraries. Note the use of `%matplotlib inline`, allowing the display of graphs inline in iPython Notebook.Documentation Scikit-Learn Pandas Numpy XGBoost Seaborn I used Scikit-Learn (or sklearn) for a few of the machine learning operations that was carried out. Pandas is used for data manipulation. Numpy is the fundamental package for scientific computation in Python. XGBoost is the classification algorithm used to make the final predictions. Seaborn is a nice tool for data visualisation built on top of matplotlib. The import code is as follows:", "link": "https://www.kaggle.com/karelrv/nyct-from-a-to-z-with-xgboost-tutorial", "tags": ["Exploratory Data Analysis", "Xgboost", "Feature Engineering"], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "xgboost", "pattern", "statsmodels"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2017-09-14 09:55:41", "date_scraped": "2020-12-13 14:39:46", "words": 516, "sentences": 25, "sum_nltk": "1.1 The Problem  New York is riddled with one-ways, small side streets, and an almost incalculable amount of pedestrians at any given point in time.\nCombine this with a mad rush to get from point A to point B, and you'll find yourself late for whatever you need to be on time for.The solution to getting from A to B when living in a city like New York (without losing your mind) is easy: take a taxi/Uber/Lyft/etc.\nIf a route A is X kilometers *longer*, but gets you there Y minutes *faster* than route B would, rather take that one.To know which route is the best one to take, we need to be able to predict how long the trip will last when taking a specific route.\nTherefore, *the goal of this playground competition is to predict the the duration of each trip in the test data set, given start and end coordinates.* 1.2 The Libraries & Functions  Using Python 3.6.1, import the following libraries.\nNote the use of `%matplotlib inline`, allowing the display of graphs inline in iPython Notebook.Documentation Scikit-Learn Pandas Numpy XGBoost Seaborn I used Scikit-Learn (or sklearn) for a few of the machine learning operations that was carried out.", "sum_nltk_words": 200, "sum_nltk_runtime": 0.006, "sum_t5": "this kernel is written and developed using IPython Notebook and XGBoost. it is ready-to-submit and can be used by any user to achieve a top-half score. the whole project is about LEARNING, sharing some ideas, and ultimately improving the degree of Data Scientists out there. the solution to getting from A to B in a city like new york is easy. if you're late for something, take a taxi or a taxi and have your driver take the", "sum_t5_words": 78, "sum_t5_runtime": 6.94, "runtime": 0.008, "nltk_category": "Finance", "nltk_category_score": 0.37721410393714905, "nltk_category_runtime": 19.341, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.8913362622261047, "nltk_subcategory_runtime": 30.98, "category": "Finance", "category_score": 0.37721410393714905, "subcategory": "Machine Learning", "subcategory_score": 0.8913362622261047, "runtime_cat": 50.322, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.787", "language_code": "en", "language_score": "0.9999972322455133", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "mvp aproach 1 introductionas admittedly lazy data scientist love accessing information easiest way possible google best friend example exception thing almost nothing cant find simple searchthis kernel written developed using ipython notebook xgboost aim readytosubmit mean user run code block submit output achieve comfortable tophalf score breaking top 10 submission would require quite bit effort sophisticated approach final section include comment suggestion alterationsvariations one might try improve score suggestion carried correctly result strong score leaderboard serf introductory tutorial approaching particular problem rather giving best solution outright leaving enough room creativity innovation solution space allow user better end result short whole project learning sharing idea ultimately improving degree data scientist enjoy 11 problem new york riddled oneways small side street almost incalculable amount pedestrian given point time mention amount carsmotorcyclesbicycles clogging road combine mad rush get point point b youll find late whatever need time forthe solution getting b living city like new york without losing mind easy take taxiuberlyftetc dont need stress traffic pedestrian moment something else like catch email although sound simple enough doesnt mean youll get destination time need driver take shortest trip possible shortest talking time route x kilometer longer get minute faster route b would rather take oneto know route best one take need able predict long trip last taking specific route therefore goal playground competition predict duration trip test data set given start end coordinate 12 library function using python 361 import following library note use matplotlib inline allowing display graph inline ipython notebookdocumentation scikitlearn panda numpy xgboost seaborn used scikitlearn sklearn machine learning operation carried panda used data manipulation numpy fundamental package scientific computation python xgboost classification algorithm used make final prediction seaborn nice tool data visualisation built top matplotlib import code follows", "tags_descriptive": ["Exploratory Data Analysis", "Xgboost", "Feature Engineering"]}