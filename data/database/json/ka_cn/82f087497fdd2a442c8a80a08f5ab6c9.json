{"title": "[CRGL2020] Iterative CNN Approach with  postproces", "description": "Iterative CNN Approach with optimized thresholdsI use the great kernel of Yakubenko Oleksii for model architecture and training. Instead of setting a common threshold of y_pred = (y_pred_continuous > 0.5) for binarizing the predictions, I determine the threshold for each board individually:  Go through a set of possible thresholds [0, 0.1, ..., 1]. Binarize the board according to the threshold, i.e. y_pred = (y_pred_continuous > threshold). Make N steps y_pred_N = make_move(y_pred, N) and compute accuracy(y_pred_N, y_true_N). Note that y_true_N is the input to the neural network, i.e. the state of the game at time N. Use the threshold which maximizes the accuracy.  This kernel uses the cythonized make_board method from here  and here.", "link": "https://www.kaggle.com/maxjeblick/crgl2020-iterative-cnn-approach-with-postproces", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-09-09 14:38:57", "date_scraped": "2020-12-12 17:58:02", "words": 117, "sentences": 9, "runtime": 0.0, "description_category": "Wholesale & Retail", "description_category_score": 0.15248794853687286, "description_category_runtime": 14.108, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.9644891023635864, "description_subcategory_runtime": 22.268, "category": "Wholesale & Retail", "category_score": 0.15248794853687286, "subcategory": "Machine Learning", "subcategory_score": 0.9644891023635864, "runtime_cat": 36.377, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.628", "language_code": "en", "language_score": "0.9999973364847601", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "iterative cnn approach optimized thresholdsi use great kernel yakubenko oleksii model architecture training instead setting common threshold y_pred y_pred_continuous 05 binarizing prediction determine threshold board individually go set possible threshold 0 01 1 binarize board according threshold ie y_pred y_pred_continuous threshold make n step y_pred_n make_movey_pred n compute accuracyy_pred_n y_true_n note y_true_n input neural network ie state game time n use threshold maximizes accuracy kernel us cythonized make_board method", "tags_descriptive": []}