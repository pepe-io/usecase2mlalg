{"title": "AugMix data augmentation on TPU", "description": "ReadMeThis is my attempt to implement AugMix on TPU. In this notebook I implemented data augmentation part whichs seems to be working well.  However, AugMix performs better when used with special loss function (Jensen-Shannon Divergence Consistency Loss). While experimenting with custom implementation of this loss using optimized training loop from this notebook, I encountered significant memory issues what made it pretty useless for the competetition and thus I did not include this loss function. AugMix utilizes simple augmentation operations which are stochastically sampled and layered to produce a high diversity of augmented images.  Above image is from original paper. https://arxiv.org/pdf/1912.02781.pdf This is also my first contact with tensorflow (micro project), so if you spot any errors and mistakes, please report in the comments section.", "link": "https://www.kaggle.com/szacho/augmix-data-augmentation-on-tpu", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "tensorflow"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-04-14 14:22:25", "date_scraped": "2020-12-12 19:56:26", "words": 126, "sentences": 7, "runtime": 0.002, "description_category": "Real Estate, Rental & Leasing", "description_category_score": 0.08066648989915848, "description_category_runtime": 12.61, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.3122963607311249, "description_subcategory_runtime": 19.677, "category": "Real Estate, Rental & Leasing", "category_score": 0.08066648989915848, "subcategory": "Machine Learning", "subcategory_score": 0.3122963607311249, "runtime_cat": 32.287, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.68", "language_code": "en", "language_score": "0.9999968566831408", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "readmethis attempt implement augmix tpu notebook implemented data augmentation part whichs seems working well however augmix performs better used special loss function jensenshannon divergence consistency loss experimenting custom implementation loss using optimized training loop notebook encountered significant memory issue made pretty useless competetition thus include loss function augmix utilizes simple augmentation operation stochastically sampled layered produce high diversity augmented image image original paper httpsarxivorgpdf191202781pdf also first contact tensorflow micro project spot error mistake please report comment section", "tags_descriptive": []}