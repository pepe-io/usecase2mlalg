{"title": "Facial recognition model in pytorch", "description": "Baseline submission using FacenetThis notebook demonstrates how to use the facenet-pytorch package to build a rudimentary deepfake detector without training any models. It also demonstrates a method for (1) loading all video frames, (2) finding all faces, and (3) calculating face embeddings at over 30 frames per second (or greater than 1 video per 10 seconds). The following steps are performed:  Create pretrained facial detection (MTCNN) and recognition (Inception Resnet) models. See the following kernel for a strided implementation of MTCNN that is able to process all frames in each video: https://www.kaggle.com/timesler/facenet-pytorch-mtcnn-process-every-frame See the following kernel for a performance comparison for different face detection implementations: https://www.kaggle.com/timesler/comparison-of-face-detection-packages   For each test video, calculate face feature vectors for ALL faces in each video. Calculate the distance from each face to the centroid for its video. Use these distances as your means of discrimination.  For (much) better results, finetune the resnet to the fake/real binary classification task instead - this is just a baseline. Alternatively, I'm sure there is much more interesting things that can be done with the feature vectors.", "link": "https://www.kaggle.com/timesler/facial-recognition-model-in-pytorch", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-03-02 01:39:17", "date_scraped": "2020-12-12 18:44:56", "words": 181, "sentences": 8, "runtime": 0.003, "description_category": "Wholesale & Retail", "description_category_score": 0.09810812026262283, "description_category_runtime": 19.946, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.9187710285186768, "description_subcategory_runtime": 32.385, "category": "Wholesale & Retail", "category_score": 0.09810812026262283, "subcategory": "Machine Learning", "subcategory_score": 0.9187710285186768, "runtime_cat": 52.331, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.794", "language_code": "en", "language_score": "0.9999964879941393", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "baseline submission using facenetthis notebook demonstrates use facenetpytorch package build rudimentary deepfake detector without training model also demonstrates method 1 loading video frame 2 finding face 3 calculating face embeddings 30 frame per second greater 1 video per 10 second following step performed create pretrained facial detection mtcnn recognition inception resnet model see following kernel strided implementation mtcnn able process frame video httpswwwkagglecomtimeslerfacenetpytorchmtcnnprocesseveryframe see following kernel performance comparison different face detection implementation httpswwwkagglecomtimeslercomparisonoffacedetectionpackages test video calculate face feature vector face video calculate distance face centroid video use distance mean discrimination much better result finetune resnet fakereal binary classification task instead baseline alternatively im sure much interesting thing done feature vector", "tags_descriptive": []}