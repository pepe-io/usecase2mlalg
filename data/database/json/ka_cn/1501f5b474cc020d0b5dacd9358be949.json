{"title": "Steganalysis : A Knaive approach", "description": "About this notebookThis notebook presents a Knaive model and is a supporting notebook to the my main notebook here, which presents complete detialed explanation and dicussions abobut this competitiom: https://www.kaggle.com/tanulsingh077/steganalysis-complete-understanding-and-model ---> Original author (TANUL SINGH) To understand how I came up with this idea and how everything works please refer above If you like my effort and contribution please show token of gratitude by upvoting my kernels Basic IdeaYesterday Kaggle launched the steganalysis competition. I found it very interesting as I have never heard of something like this. It instilled the spy fantasies within me. From yesterday I have been reading research papers on approaching this problem using deep learning but before I tried SRNET I want to do something of own. After a lot of thinking I came up with this :-  In this we are suppose to predict whether the test images are hiding some information or not but we dont have labels for the train images we just clean images and same images encoded using different algos, the main point is creating labels then we can approach this as regression problem . I thought Since in steganography in images, any technique involves changes in pixel values, a very knaive way to get labels would be to flatten the RGB images(both encoded and normal) into a vector and then find cosine dissimilarity between the two vectors, since the encoded value contains a hidden information its vector will differ from the main vector and hence we will have a non zero value of cosine dissimilarity. Then we Label the images as: Cover_images as 0 , JMIPOD images as similarity between cover and JMIPOD images , JUNIWARD images as similarity between cover and JUNIWARD images, UERD images as similarity between cover and UERD images After creating our labels , we will stack all the images and labels in a datafame and then approach this as simple regression problem  Update : One flaw that I found in the above approach was that labels to be predicted should be between zero and one, whereas our regression problem predicts values of any range and values can also be negative , so I passed out cosine dissmilarity through sigmoid function to get a probability between zero and one", "link": "https://www.kaggle.com/tanulsingh077/steganalysis-a-knaive-approach", "tags": ["Feature Engineering"], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "skimage"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-05-02 23:13:29", "date_scraped": "2020-12-12 16:29:24", "words": 376, "sentences": 7, "sum_nltk": "About this notebookThis notebook presents a Knaive model and is a supporting notebook to the my main notebook here, which presents complete detialed explanation and dicussions abobut this competitiom: https://www.kaggle.com/tanulsingh077/steganalysis-complete-understanding-and-model ---> Original author (TANUL SINGH) To understand how I came up with this idea and how everything works please refer above If you like my effort and contribution please show token of gratitude by upvoting my kernels Basic IdeaYesterday Kaggle launched the steganalysis competition.\nAfter a lot of thinking I came up with this :-  In this we are suppose to predict whether the test images are hiding some information or not but we dont have labels for the train images we just clean images and same images encoded using different algos, the main point is creating labels then we can approach this as regression problem .\nI thought Since in steganography in images, any technique involves changes in pixel values, a very knaive way to get labels would be to flatten the RGB images(both encoded and normal) into a vector and then find cosine dissimilarity between the two vectors, since the encoded value contains a hidden information its vector will differ from the main vector and hence we will have a non zero value of cosine dissimilarity.", "sum_nltk_words": 207, "sum_nltk_runtime": 0.003, "sum_t5": "steganalysis is a model for predicting images' hidden information. a knaive way to get labels would be to flatten the RGB images into a vector. this would then find cosine dissimilarity between the two vectors. a regression problem can predict values of any range and values can also be predicted. a flaw is that labels to be predicted should be between zero and one. a knaive way to get labels would be to flatten the RGB", "sum_t5_words": 76, "sum_t5_runtime": 7.001, "runtime": 0.003, "nltk_category": "Wholesale & Retail", "nltk_category_score": 0.12763868272304535, "nltk_category_runtime": 19.963, "nltk_subcategory": "Student", "nltk_subcategory_score": 0.34490180015563965, "nltk_subcategory_runtime": 31.875, "category": "Wholesale & Retail", "category_score": 0.12763868272304535, "subcategory": "Student", "subcategory_score": 0.34490180015563965, "runtime_cat": 51.838, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.693", "language_code": "en", "language_score": "0.999997748257872", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "notebookthis notebook present knaive model supporting notebook main notebook present complete detialed explanation dicussions abobut competitiom httpswwwkagglecomtanulsingh077steganalysiscompleteunderstandingandmodel original author tanul singh understand came idea everything work please refer like effort contribution please show token gratitude upvoting kernel basic ideayesterday kaggle launched steganalysis competition found interesting never heard something like instilled spy fantasy within yesterday reading research paper approaching problem using deep learning tried srnet want something lot thinking came suppose predict whether test image hiding information dont label train image clean image image encoded using different algos main point creating label approach regression problem thought since steganography image technique involves change pixel value knaive way get label would flatten rgb imagesboth encoded normal vector find cosine dissimilarity two vector since encoded value contains hidden information vector differ main vector hence non zero value cosine dissimilarity label image cover_images 0 jmipod image similarity cover jmipod image juniward image similarity cover juniward image uerd image similarity cover uerd image creating label stack image label datafame approach simple regression problem update one flaw found approach label predicted zero one whereas regression problem predicts value range value also negative passed cosine dissmilarity sigmoid function get probability zero one", "tags_descriptive": ["Feature Engineering"]}