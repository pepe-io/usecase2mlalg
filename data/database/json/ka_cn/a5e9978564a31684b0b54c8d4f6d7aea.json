{"title": "Guide to MTCNN in facenet-pytorch", "description": "This notebook aims to demonstrate the different ways to use the MTCNN face detection module of facenet-pytorch. Originally reported in Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks, the MTCNN network is able to simultaneously propose bounding boxes, five-point facial landmarks, and detection probabilities. Taken from the original paper: Face detection and alignment in unconstrained environments are challenging due to various poses, illuminations and occlusions. Recent studies show that deep learning approaches can achieve impressive performance on these two tasks. In this paper, we propose a deep cascaded multi-task framework which exploits the inherent correlation between them to boost up their performance. In particular, our framework adopts a cascaded structure with three stages of carefully designed deep convolutional networks that predict face and landmark location in a coarse-to-fine manner. In addition, in the learning process, we propose a new online hard sample mining strategy that can improve the performance automatically without manual sample selection. Our method achieves superior accuracy over the state-of-the-art techniques on the challenging FDDB and WIDER FACE benchmark for face detection, and AFLW benchmark for face alignment, while keeps real time performance.  facenet-pytorch includes an efficient, cuda-ready implementation of MTCNN that will be demonstrated in this notebook. The following topics will be covered:  Documentation Basic usage Preventing image normalization Margin adjustment Multiple faces in a single image Batched detection Bounding boxes and facial landmarks Saving face datasets  Other resources:  The facenet-pytorch github repo Notebook demonstrating combined use of face detection and recognition The FastMTCNN algorithm", "link": "https://www.kaggle.com/timesler/guide-to-mtcnn-in-facenet-pytorch", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-05-05 22:23:04", "date_scraped": "2020-12-12 18:44:56", "words": 254, "sentences": 10, "sum_nltk": "This notebook aims to demonstrate the different ways to use the MTCNN face detection module of facenet-pytorch.\nOriginally reported in Joint Face Detection and Alignment using Multi-task Cascaded Convolutional Networks, the MTCNN network is able to simultaneously propose bounding boxes, five-point facial landmarks, and detection probabilities.\nTaken from the original paper: Face detection and alignment in unconstrained environments are challenging due to various poses, illuminations and occlusions.\nRecent studies show that deep learning approaches can achieve impressive performance on these two tasks.\nIn this paper, we propose a deep cascaded multi-task framework which exploits the inherent correlation between them to boost up their performance.\nIn particular, our framework adopts a cascaded structure with three stages of carefully designed deep convolutional networks that predict face and landmark location in a coarse-to-fine manner.\nfacenet-pytorch includes an efficient, cuda-ready implementation of MTCNN that will be demonstrated in this notebook.\nThe following topics will be covered:  Documentation Basic usage Preventing image normalization Margin adjustment Multiple faces in a single image Batched detection Bounding boxes and facial landmarks Saving face datasets  Other resources:  The facenet-pytorch github repo Notebook demonstrating combined use of face detection and recognition The FastMTCNN algorithm", "sum_nltk_words": 190, "sum_nltk_runtime": 0.004, "sum_t5": "notebook aims to demonstrate different ways to use facenet-pytorch. the MTCNN network is able to simultaneously propose bounding boxes and landmarks. the paper proposes a deep cascaded multi-task framework. it exploits the inherent correlation between them to boost up their performance. a sysadmin will be assigned to the notebook to test the implementation. a sysadmin will be assigned to the notebook to test the implementation.", "sum_t5_words": 65, "sum_t5_runtime": 6.254, "runtime": 0.003, "nltk_category": "Manufacturing", "nltk_category_score": 0.5717215538024902, "nltk_category_runtime": 19.766, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9626597166061401, "nltk_subcategory_runtime": 31.511, "category": "Manufacturing", "category_score": 0.5717215538024902, "subcategory": "Machine Learning", "subcategory_score": 0.9626597166061401, "runtime_cat": 51.277, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.781", "language_code": "en", "language_score": "0.9999961600225773", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "notebook aim demonstrate different way use mtcnn face detection module facenetpytorch originally reported joint face detection alignment using multitask cascaded convolutional network mtcnn network able simultaneously propose bounding box fivepoint facial landmark detection probability taken original paper face detection alignment unconstrained environment challenging due various pose illumination occlusion recent study show deep learning approach achieve impressive performance two task paper propose deep cascaded multitask framework exploit inherent correlation boost performance particular framework adopts cascaded structure three stage carefully designed deep convolutional network predict face landmark location coarsetofine manner addition learning process propose new online hard sample mining strategy improve performance automatically without manual sample selection method achieves superior accuracy stateoftheart technique challenging fddb wider face benchmark face detection aflw benchmark face alignment keep real time performance facenetpytorch includes efficient cudaready implementation mtcnn demonstrated notebook following topic covered documentation basic usage preventing image normalization margin adjustment multiple face single image batched detection bounding box facial landmark saving face datasets resource facenetpytorch github repo notebook demonstrating combined use face detection recognition fastmtcnn algorithm", "tags_descriptive": []}