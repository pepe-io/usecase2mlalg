{"title": "Keras ConvNet LB 0.0052 w/ Visualization", "description": "NOTE: I managed to get an LB of 0.0052 with this code, but due to some randomness still in the script, the score varies between 0.016 and 0.005. Using some form of kfold-validation reduces this variance. EDIT: I would run this somewhere other than Kaggle locally for 150 epochs instead of 89 like I have it set to below; 89 is the best I could do without the script timing out. The IdeaI started this competition by simply feeding the pre-extracted features into a multi-layer perceptron with one hidden layer and got surprisingly good results, but I still had all this image data that I wasn't using. My immediate thought then was to simply combine a convolutional neural network on the images with the pre-extracted features MLP and train the entire model end to end. Keras's functional API gives us a really easy way to do this. Below, I'll outline the process of getting this model working along, point out some nice resources to learning about convolutional nets, and do some visualization of what the neural network is actually doing. But before we do that, let's just get all the data loading out of the way.", "link": "https://www.kaggle.com/abhmul/keras-convnet-lb-0-0052-w-visualization", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "keras"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2016-12-28 19:09:59", "date_scraped": "2020-12-13 13:03:36", "words": 196, "sentences": 8, "runtime": 0.01, "description_category": "Utilities", "description_category_score": 0.34967344999313354, "description_category_runtime": 17.084, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.979893147945404, "description_subcategory_runtime": 27.928, "category": "Utilities", "category_score": 0.34967344999313354, "subcategory": "Machine Learning", "subcategory_score": 0.979893147945404, "runtime_cat": 45.011, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.776", "language_code": "en", "language_score": "0.9999985764647623", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "note managed get lb 00052 code due randomness still script score varies 0016 0005 using form kfoldvalidation reduces variance edit would run somewhere kaggle locally 150 epoch instead 89 like set 89 best could without script timing ideai started competition simply feeding preextracted feature multilayer perceptron one hidden layer got surprisingly good result still image data wasnt using immediate thought simply combine convolutional neural network image preextracted feature mlp train entire model end end kera functional api give u really easy way ill outline process getting model working along point nice resource learning convolutional net visualization neural network actually let get data loading way", "tags_descriptive": []}