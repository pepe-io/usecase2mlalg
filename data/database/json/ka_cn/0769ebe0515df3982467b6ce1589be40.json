{"title": "Distance - is all you need. LB -1.481", "description": "Core IdeaDespite a lot of creeping Physics and Chemistry knowledge introduced in the description, this competition is more about Geometry and pattern matching. The hypothesis of this kernel is next:  If we have two similar sets of atoms with the same distances between them and the same types - the scalar coupling constant should be very close. More closest atoms to the pair of atoms under prediction have higher influence on scalar coupling constant then those with higher distance  So, basically, this problem could be dealt with some kind of K-Nearest Neighbor algorithm or any tree-based - e.g. LightGBM, in case we can find some representation which would describe similar configurations with similar feature sets. Each atom is described with 3 cartesian coordinates. This representation is not stable. Each coupling pair is located in a different point in space and two similar coupling sets would have very different X,Y,Z. So, instead of using coordinates let's consider next system:  Take each pair of atoms as two first core atoms Calculate the center between the pair Find all n-nearest atoms to the center (excluding first two atoms) Take two closest atoms from step 3 - they will be 3rd and 4th core atoms Calculate the distances from 4 core atoms to the rest of the atoms and to the core atoms as well  Using this representation each atom position can be described by 4 distances from the core atoms. This representation is stable to rotation and translation. And it's suitable for pattern-matching. So, we can take a sequence of atoms, describe each by 4 distances + atom type(H,O,etc) and looking up for the same pattern we can find similar configurations and detect scalar coupling constant. Here I used LightGBM, because sklearn KNN can't deal with the amount of data. My blind guess is that hand-crafted KNN can outperform LightGBM. Let's code the solution!", "link": "https://www.kaggle.com/criskiev/distance-is-all-you-need-lb-1-481", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "pattern", "lightgbm"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-08-07 07:25:35", "date_scraped": "2020-12-12 17:53:35", "words": 315, "sentences": 14, "sum_nltk": "The hypothesis of this kernel is next:  If we have two similar sets of atoms with the same distances between them and the same types - the scalar coupling constant should be very close.\nMore closest atoms to the pair of atoms under prediction have higher influence on scalar coupling constant then those with higher distance  So, basically, this problem could be dealt with some kind of K-Nearest Neighbor algorithm or any tree-based - e.g. LightGBM, in case we can find some representation which would describe similar configurations with similar feature sets.\nSo, instead of using coordinates let's consider next system:  Take each pair of atoms as two first core atoms Calculate the center between the pair Find all n-nearest atoms to the center (excluding first two atoms) Take two closest atoms from step 3 - they will be 3rd and 4th core atoms Calculate the distances from 4 core atoms to the rest of the atoms and to the core atoms as well  Using this representation each atom position can be described by 4 distances from the core atoms.\nSo, we can take a sequence of atoms, describe each by 4 distances + atom type(H,O,etc) and looking up for the same pattern we can find similar configurations and detect scalar coupling constant.", "sum_nltk_words": 214, "sum_nltk_runtime": 0.003, "sum_t5": "scalar coupling constant is a function of distance between two atoms. more atoms with the same distances have higher influence on scalar coupling constant. sklearn KNN can't deal with the amount of data. my blind guess is that hand-crafted KNN can outperform lightGBM. if we can find similar configurations with similar feature sets, we can solve this problem.", "sum_t5_words": 58, "sum_t5_runtime": 6.045, "runtime": 0.003, "nltk_category": "Physics", "nltk_category_score": 0.588763952255249, "nltk_category_runtime": 17.976, "nltk_subcategory": "Physical", "nltk_subcategory_score": 0.6612579226493835, "nltk_subcategory_runtime": 28.877, "category": "Physics", "category_score": 0.588763952255249, "subcategory": "Physical", "subcategory_score": 0.6612579226493835, "runtime_cat": 46.854, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.734", "language_code": "en", "language_score": "0.9999980810816821", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "core ideadespite lot creeping physic chemistry knowledge introduced description competition geometry pattern matching hypothesis kernel next two similar set atom distance type scalar coupling constant close closest atom pair atom prediction higher influence scalar coupling constant higher distance basically problem could dealt kind knearest neighbor algorithm treebased eg lightgbm case find representation would describe similar configuration similar feature set atom described 3 cartesian coordinate representation stable coupling pair located different point space two similar coupling set would different xyz instead using coordinate let consider next system take pair atom two first core atom calculate center pair find nnearest atom center excluding first two atom take two closest atom step 3 3rd 4th core atom calculate distance 4 core atom rest atom core atom well using representation atom position described 4 distance core atom representation stable rotation translation suitable patternmatching take sequence atom describe 4 distance atom typehoetc looking pattern find similar configuration detect scalar coupling constant used lightgbm sklearn knn cant deal amount data blind guess handcrafted knn outperform lightgbm let code solution", "tags_descriptive": []}