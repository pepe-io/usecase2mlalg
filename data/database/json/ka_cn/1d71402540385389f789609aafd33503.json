{"title": "Recursion: 2-headed EfficientNet, 2-stage training", "description": "About this kernelThis is a rather quick and dirty kernel I created, with two ideas in mind: Training a \"2-headed\" network that will learn to predict siRNA using images from both sites at the same time, and split the learning process into two stages, namely first training on all data, then training the CNN on data from a single experiment at a time. The second idea comes from this thread by Phalanx. The data comes from my previous kernel on preprocessing. Here are the relevant sections:  Data Generator: The __generate_X method is pretty different, since it loads two images at the same time. Everything else is standard Model: The CNN architecture used here is EfficientNetB2. With the right learning rates and enough time, you can probably try B1-B5; they have unfortunately not succeeded in my case. The inputs are two images, i.e. from site 1 and site 2. The two images are passed through the same CNN, then global-average-pooled, and added to form a single 1280-dimensional vector, which is ultimately used to perform predictions. This means that the networks will be updated simultaneously from the gradients of both sites. Phase 1: Train the model on all data from 10 epochs, and save results to model.h5. Phase 2: Load model.h5 and train the model for 15 epochs on data from a single cell line, i.e. HEPG2, HUVEC, RPE, U2OS.  Changelog V20: Added random flipping.", "link": "https://www.kaggle.com/xhlulu/recursion-2-headed-efficientnet-2-stage-training", "tags": ["DL", "Classification", "CNN"], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "keras", "tensorflow"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-08-19 02:43:33", "date_scraped": "2020-12-13 16:34:09", "words": 235, "sentences": 14, "sum_nltk": "About this kernelThis is a rather quick and dirty kernel I created, with two ideas in mind: Training a \"2-headed\" network that will learn to predict siRNA using images from both sites at the same time, and split the learning process into two stages, namely first training on all data, then training the CNN on data from a single experiment at a time.\nThe second idea comes from this thread by Phalanx.\nThe data comes from my previous kernel on preprocessing.\nHere are the relevant sections:  Data Generator: The __generate_X method is pretty different, since it loads two images at the same time.\nThe inputs are two images, i.e. from site 1 and site 2.\nThe two images are passed through the same CNN, then global-average-pooled, and added to form a single 1280-dimensional vector, which is ultimately used to perform predictions.\nThis means that the networks will be updated simultaneously from the gradients of both sites.\nPhase 1: Train the model on all data from 10 epochs, and save results to model.h5.\nPhase 2: Load model.h5 and train the model for 15 epochs on data from a single cell line, i.e. HEPG2, HUVEC, RPE, U2OS.", "sum_nltk_words": 188, "sum_nltk_runtime": 0.002, "sum_t5": "a \"2-headed\" network will learn to predict siRNA using images from both sites at the same time. the learning process will be split into two stages, with the first training on all data. the second idea comes from this thread by Phalanx. the data comes from my previous kernel on preprocessing. a kernel called'siRNA' was created with the same idea. a kernel called'siRNA' was also created with the same idea.", "sum_t5_words": 70, "sum_t5_runtime": 5.94, "runtime": 0.003, "nltk_category": "Biotechnological & Life Sciences", "nltk_category_score": 0.33224543929100037, "nltk_category_runtime": 18.624, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9220342636108398, "nltk_subcategory_runtime": 29.639, "category": "Biotechnological & Life Sciences", "category_score": 0.33224543929100037, "subcategory": "Machine Learning", "subcategory_score": 0.9220342636108398, "runtime_cat": 48.263, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.72", "language_code": "en", "language_score": "0.9999952823458744", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "kernelthis rather quick dirty kernel created two idea mind training 2headed network learn predict sirna using image site time split learning process two stage namely first training data training cnn data single experiment time second idea come thread phalanx data come previous kernel preprocessing relevant section data generator __generate_x method pretty different since load two image time everything else standard model cnn architecture used efficientnetb2 right learning rate enough time probably try b1b5 unfortunately succeeded case input two image ie site 1 site 2 two image passed cnn globalaveragepooled added form single 1280dimensional vector ultimately used perform prediction mean network updated simultaneously gradient site phase 1 train model data 10 epoch save result modelh5 phase 2 load modelh5 train model 15 epoch data single cell line ie hepg2 huvec rpe u2os changelog v20 added random flipping", "tags_descriptive": ["Deep Learning (DL)", "Classification", "Convolutional Neural Network (CNN)"]}