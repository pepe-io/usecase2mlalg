{"title": "Dataset with number of bonds between atoms", "description": "SynopsisThe number of bonds between two atoms is an interresting feature to play with but is not provided with the competition data. This kernel builds a dataset with the reconstructed bonding scheme for each molecule:  The algorithm used to do so is to build a spanning tree conecting each atom of the molecule.  Connection are made based on the expecting bonding distance for each pair of nearby atoms.   A partial ionized group detection is performed.   Shortest cycles are detected.  Note: There is another alternative to build bonding data, which I've not tested yet, see post here: Helpful Information: How to obtain bonding data Changelog V4 : manual inspection of one molecule failing bond matching : dsgdb9nsd_000271 = alanine isomere V5 : added Ase 3D mouse visualization for alanine \"bug\" V6 : added support for ionized molecules and 4N bonds after discovering the zwitterionic form of alanine in dsgdb9nsd_000202. Changed type from 1CH to 1.0CH V9 : added cycle detection code with statistics and examples V11: save cycles in .csv output files  Table train_bonds and test_bondsThe Output Dataset will be updated following bond detction improvements.  It is built with the same keys as for the competition tables structure and train/test. Tables train_bonds and test_bonds have one row per bond : molecule_name |\u00a0atom_index_0 | atom_index_1 | nbond | error | bond_type  nbond is the number of covalent bonds between atom_index_0 (relative to structure) and atom_index_1. It can take values 1.5 for COO- groups. error is 0 if the molecule has a  consistent reconstruction (meaning that each atom has the expected number ofcovalent bonds).  Otherwise it is set to 1 for each bond of the molecule bond_type is . Atom appear in lexicographic order to ensure unicity for 2 atoms combination.   Example: 1.0CH, 2.0CC,  1.5CO  Table train_charges and test_chargesIt has been found that some molecules are ionized after discovering the zwiterionic form of beta-alanine in molecule dsgdb9nsd_000202. Hence support for atom charge has been included in tables train_charges and test_charges, plus an optional 4th bond for N.  These tables have the very same key as structure and one row is: molecule_name |\u00a0atom_index | charge  charge can be 0, -1, +0.5 (for O in carboxyle) or +1 (may evolve if needed)  Table train_cycles and test_cyclesCycles are detected and stored in a separated table because one atom can be a member of several cycles. These tables have the very same key as structure and one row is: molecule_name |\u00a0cycle_index | cycle_seq | atom_index  cycle_index starts from zero and allow to select one cycle cycle_seq is the index of atom in the cycle sequence. It is guaranteed that two consecutive atoms in cycle sequence have a covalent bond. atom_index is the atom idex from table structure which can be member of several cycle.     General information This kernel uses data from Predicting Molecular Properties which is intended to predict interactions between atoms in the domain of Nuclar Magnetic Resonnance (NMR). More precisely it is the scalar coupling constant between atoms which is to be predicted. As this challenge is based uppon molecular topological properties, it can be useful to have an appropriate way of representing molecules. These visualizations can then be used to infer useful hints to understand the coupling properties, engineer appropriate features and debug prediction failures.", "link": "https://www.kaggle.com/asauve/dataset-with-number-of-bonds-between-atoms", "tags": ["Feature Engineering"], "kind": ["Project", "(Notebook)"], "ml_libs": [], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-07-02 22:42:53", "date_scraped": "2020-12-12 17:53:35", "words": 565, "sentences": 23, "sum_nltk": "Changed type from 1CH to 1.0CH V9 : added cycle detection code with statistics and examples V11: save cycles in .csv output files  Table train_bonds and test_bondsThe Output Dataset will be updated following bond detction improvements.\nTables train_bonds and test_bonds have one row per bond : molecule_name |\u00a0atom_index_0 | atom_index_1 | nbond | error | bond_type  nbond is the number of covalent bonds between atom_index_0 (relative to structure) and atom_index_1.\nHence support for atom charge has been included in tables train_charges and test_charges, plus an optional 4th bond for N.\nThese tables have the very same key as structure and one row is: molecule_name |\u00a0atom_index | charge  charge can be 0, -1, +0.5 (for O in carboxyle) or +1 (may evolve if needed)  Table train_cycles and test_cyclesCycles are detected and stored in a separated table because one atom can be a member of several cycles.\nThese tables have the very same key as structure and one row is: molecule_name |\u00a0cycle_index | cycle_seq | atom_index  cycle_index starts from zero and allow to select one cycle cycle_seq is the index of atom in the cycle sequence.\natom_index is the atom idex from table structure which can be member of several cycle.", "sum_nltk_words": 199, "sum_nltk_runtime": 0.006, "sum_t5": "this kernel builds a dataset with the reconstructed bonding scheme for each molecule. connection are made based on the expecting bonding distance for each pair of nearby atoms. a partial ionized group detection is performed. shortest cycles are detected. dsgdb9nsd_000271 = alanine isomere V6 : added support for ionized molecules and 4N bonds.", "sum_t5_words": 53, "sum_t5_runtime": 6.304, "runtime": 0.004, "nltk_category": "Utilities", "nltk_category_score": 0.3398410379886627, "nltk_category_runtime": 21.894, "nltk_subcategory": "Tools", "nltk_subcategory_score": 0.4088541567325592, "nltk_subcategory_runtime": 35.09, "category": "Utilities", "category_score": 0.3398410379886627, "subcategory": "Tools", "subcategory_score": 0.4088541567325592, "runtime_cat": 56.984, "programming_language": "Jupyter Notebook", "ml_score": "0.5", "engagement_score": "0.733", "language_code": "en", "language_score": "0.999996763830404", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "synopsisthe number bond two atom interresting feature play provided competition data kernel build dataset reconstructed bonding scheme molecule algorithm used build spanning tree conecting atom molecule connection made based expecting bonding distance pair nearby atom partial ionized group detection performed shortest cycle detected note another alternative build bonding data ive tested yet see post helpful information obtain bonding data changelog v4 manual inspection one molecule failing bond matching dsgdb9nsd_000271 alanine isomere v5 added ase 3d mouse visualization alanine bug v6 added support ionized molecule 4n bond discovering zwitterionic form alanine dsgdb9nsd_000202 changed type 1ch 10ch v9 added cycle detection code statistic example v11 save cycle csv output file table train_bonds test_bondsthe output dataset updated following bond detction improvement built key competition table structure traintest table train_bonds test_bonds one row per bond molecule_name atom_index_0 atom_index_1 nbond error bond_type nbond number covalent bond atom_index_0 relative structure atom_index_1 take value 15 coo group error 0 molecule consistent reconstruction meaning atom expected number ofcovalent bond otherwise set 1 bond molecule bond_type atom appear lexicographic order ensure unicity 2 atom combination example 10ch 20cc 15co table train_charges test_chargesit found molecule ionized discovering zwiterionic form betaalanine molecule dsgdb9nsd_000202 hence support atom charge included table train_charges test_charges plus optional 4th bond n table key structure one row molecule_name atom_index charge charge 0 1 05 carboxyle 1 may evolve needed table train_cycles test_cyclescycles detected stored separated table one atom member several cycle table key structure one row molecule_name cycle_index cycle_seq atom_index cycle_index start zero allow select one cycle cycle_seq index atom cycle sequence guaranteed two consecutive atom cycle sequence covalent bond atom_index atom idex table structure member several cycle general information kernel us data predicting molecular property intended predict interaction atom domain nuclar magnetic resonnance nmr precisely scalar coupling constant atom predicted challenge based uppon molecular topological property useful appropriate way representing molecule visualization used infer useful hint understand coupling property engineer appropriate feature debug prediction failure", "tags_descriptive": ["Feature Engineering"]}