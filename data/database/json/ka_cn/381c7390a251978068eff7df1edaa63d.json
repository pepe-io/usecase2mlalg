{"title": "Satellite Clouds: U-Net with ResNet Encoder", "description": "About this kernel Preprocessing: Expand the train dataframe to include image ID. Also create mask_count_df which will be useful for later. Utility Functions: Mostly copied from Paul's kernel and SIIM starter code (see references). You won't need to modify those. Sample Test: Simply visualizing a sample image and its masks, Data Generator: Very long and possibly complex. If you can, skip this part of the code. If you absolute need to modify the data generation process, please take a look __generate_X and __generate_y; in theory everything else should be left as is. This code is different from my previous Keras U-Net boilerplate since it lets you reshape the input image as well as the mask, and lets you  Model Architecture: The architecture is slightly different from the other kernels, since it learns to predict all of the four masks at the same time, instead of predicting a single mask and duplicating it. It also takes as input grayscale images. Training: Running only for 25 epochs. Evaluation & Submission: The submission code is pretty messy. Essentially, I'm splitting the test dataframe into multiple chunks, then run the model and mask2rle converter on the results. I'm doing this in order to not run out of RAM as we try to convert all the masks from array to RLE.  Changelog V27: Replace ResNet-18 with ResNet-34. V25: Replace RAdam with NAdam. V22: Replace Adam with RAdam. V18: Changed the vanilla U-Net by using ResNet encoder. This is easily done using the incredible segmentation-models library made by qubvel. V15: Fixed the test image size output, which should have been 350x525 instead of 1600x2100 (which is valid for training data only). Also removed the \"Micro-EDA\" and \"Show Sample\", since artgor's  kernel already covers albumentations very well.  References segmentation-models: https://github.com/qubvel/segmentation_models EDA of albumentations: https://www.kaggle.com/artgor/segmentation-in-pytorch-using-convenient-tools Data generator: https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly RLE encoding and decoding: https://www.kaggle.com/paulorzp/rle-functions-run-lenght-encode-decode Architecture: https://www.kaggle.com/jesperdramsch/intro-chest-xray-dicom-viz-u-nets-full-data Mask encoding: https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/data My original Kernel U-Net: https://www.kaggle.com/xhlulu/severstal-simple-keras-u-net-boilerplate", "link": "https://www.kaggle.com/xhlulu/satellite-clouds-u-net-with-resnet-encoder", "tags": ["CNN"], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "albumentations", "tensorflow", "sklearn", "pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-09-07 22:43:21", "date_scraped": "2020-12-13 18:07:53", "words": 319, "sentences": 21, "sum_nltk": "About this kernel Preprocessing: Expand the train dataframe to include image ID.\nUtility Functions: Mostly copied from Paul's kernel and SIIM starter code (see references).\nSample Test: Simply visualizing a sample image and its masks, Data Generator: Very long and possibly complex.\nThis code is different from my previous Keras U-Net boilerplate since it lets you reshape the input image as well as the mask, and lets you  Model Architecture: The architecture is slightly different from the other kernels, since it learns to predict all of the four masks at the same time, instead of predicting a single mask and duplicating it.\nEssentially, I'm splitting the test dataframe into multiple chunks, then run the model and mask2rle converter on the results.\nI'm doing this in order to not run out of RAM as we try to convert all the masks from array to RLE.\nV25: Replace RAdam with NAdam.\nV22: Replace Adam with RAdam.\nV15: Fixed the test image size output, which should have been 350x525 instead of 1600x2100 (which is valid for training data only).\nReferences segmentation-models: https://github.com/qubvel/segmentation_models EDA of albumentations: https://www.kaggle.com/artgor/segmentation-in-pytorch-using-convenient-tools Data generator: https://stanford.edu/~shervine/blog/keras-how-to-generate-data-on-the-fly RLE encoding and decoding: https://www.kaggle.com/paulorzp/rle-functions-run-lenght-encode-decode Architecture: https://www.kaggle.com/jesperdramsch/intro-chest-xray-dicom-viz-u-nets-full-data Mask encoding: https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/data My original Kernel U-Net: https://www.kaggle.com/xhlulu/severstal-simple-keras-u-net-boilerplate", "sum_nltk_words": 193, "sum_nltk_runtime": 0.004, "sum_t5": "a new kernel is generating masks and reshaping the input image. the code is a bit messy, but it's a good starting point. the kernel is based on a python based kernel. it's also a python based kernel. a new kernel is generating masks and reshaping the image. a new kernel is generating masks.", "sum_t5_words": 54, "sum_t5_runtime": 6.378, "runtime": 0.0, "nltk_category": "Utilities", "nltk_category_score": 0.5941528081893921, "nltk_category_runtime": 34.074, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.6895692944526672, "nltk_subcategory_runtime": 55.758, "category": "Utilities", "category_score": 0.5941528081893921, "subcategory": "Machine Learning", "subcategory_score": 0.6895692944526672, "runtime_cat": 89.832, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.76", "language_code": "en", "language_score": "0.999995649939921", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "kernel preprocessing expand train dataframe include image id also create mask_count_df useful later utility function mostly copied paul kernel siim starter code see reference wont need modify sample test simply visualizing sample image mask data generator long possibly complex skip part code absolute need modify data generation process please take look __generate_x __generate_y theory everything else left code different previous kera unet boilerplate since let reshape input image well mask let model architecture architecture slightly different kernel since learns predict four mask time instead predicting single mask duplicating also take input grayscale image training running 25 epoch evaluation submission submission code pretty messy essentially im splitting test dataframe multiple chunk run model mask2rle converter result im order run ram try convert mask array rle changelog v27 replace resnet18 resnet34 v25 replace radam nadam v22 replace adam radam v18 changed vanilla unet using resnet encoder easily done using incredible segmentationmodels library made qubvel v15 fixed test image size output 350x525 instead 1600x2100 valid training data also removed microeda show sample since artgors kernel already cover albumentations well reference segmentationmodels httpsgithubcomqubvelsegmentation_models eda albumentations httpswwwkagglecomartgorsegmentationinpytorchusingconvenienttools data generator httpsstanfordedushervineblogkerashowtogeneratedataonthefly rle encoding decoding httpswwwkagglecompaulorzprlefunctionsrunlenghtencodedecode architecture httpswwwkagglecomjesperdramschintrochestxraydicomvizunetsfulldata mask encoding httpswwwkagglecomcsiimacrpneumothoraxsegmentationdata original kernel unet httpswwwkagglecomxhluluseverstalsimplekerasunetboilerplate", "tags_descriptive": ["Convolutional Neural Network (CNN)"]}