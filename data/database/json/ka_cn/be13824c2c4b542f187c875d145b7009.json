{"title": "Matching + Clustering", "description": "OverviewInput: training data with image urls and labels Goal: generate the prediction of labels of each test set image Key steps of my strategy Rank the google labels of training images by frequency. Filter out labels that are not indicative or not having strong correlation with wish.com labels.  For each google label, extract all training images containing that label and corresponding wish.com labels. Aggregate those wish.com labels and rank them according to frequency. Filter out labels with frequency less than a certain threshold. My hypothesis is that the frequent wish.com labels are correlated with google label, so we can use google labels as an indicator of wish.com labels.  Detect the google labels of each test image, and assign corresponding wish.com to each test image. Cluster training images, and extract frequent labels of each cluster. My hypothesis is that for images in each cluster, they should have some labels in common. Use google labels to detect which cluster each test image belongs to. Add common labels of that cluster to the test image. Remove duplicate wish.com labels of each test image.  Full strategy with details: Use Google Vision API to detect the labels of 10,000 images in training set. Aggregate all labels together and rank them by frequency. Filter out top 10 most frequent labels as they are not indicative in this circumstance. Also, filter out labels with frequency less than a threshold. I will name the table generated in this step as \u201cranking table\u201d.  For each label in \u201cranking table\u201d, identify training images containing that label, and aggregate corresponding wish.com labels together. Then aggregate those wish.com labels and rank them according to frequency. Filter out wish.com labels with frequency lower than a threshold. My hypothesis is that the frequent wish.com labels are correlated with google label, so we can use google labels as an indicator of wish.com labels. After this step, a table indicating the matching relationship will be generated, and I will name this table as \u201cmatching table\u201d.  Use Google Vision API to detect the labels of each image in test set. For each Google label of the image, append the matching wish.com labels from the matching table. After this step, a table named \u201cprediction table\u201d will be generated. The column \u201cpredicted labels\u201d is super long and there are many duplicate labels, I will remove duplicate labels later.  Use k-means clustering method to assign 10,000 training set images into 60 clusters. For each cluster, select training set images belonging to that cluster and aggregate all corresponding wish.com labels. Rank those labels by frequency and select top 5 most frequent labels as representative labels of that cluster. After this step, a table indicating the representative labels of each cluster will be generated, and I will name this table as \u201cclusters table\u201d.  For each test set image, identify which cluster it belongs to. For each test set image, if predicted labels contain three or more representative labels of a cluster, then I would say the image belongs to that cluster, and I will assign other representative labels to that label.  Remove duplicate labels of each test set image, as I found that duplicate labels will affect the f-score of prediction.   Flow chart", "link": "https://www.kaggle.com/disenwang1994/matching-clustering", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2018-05-22 02:30:00", "date_scraped": "2020-12-12 21:47:00", "words": 541, "sentences": 34, "sum_nltk": "OverviewInput: training data with image urls and labels Goal: generate the prediction of labels of each test set image Key steps of my strategy Rank the google labels of training images by frequency.\nFilter out labels that are not indicative or not having strong correlation with wish.com labels.\nFor each google label, extract all training images containing that label and corresponding wish.com labels.\nUse google labels to detect which cluster each test image belongs to.\nFull strategy with details: Use Google Vision API to detect the labels of 10,000 images in training set.\nFor each label in \u201cranking table\u201d, identify training images containing that label, and aggregate corresponding wish.com labels together.\nUse Google Vision API to detect the labels of each image in test set.\nFor each cluster, select training set images belonging to that cluster and aggregate all corresponding wish.com labels.\nRank those labels by frequency and select top 5 most frequent labels as representative labels of that cluster.\nFor each test set image, if predicted labels contain three or more representative labels of a cluster, then I would say the image belongs to that cluster, and I will assign other representative labels to that label.", "sum_nltk_words": 188, "sum_nltk_runtime": 0.008, "sum_t5": "Rank google labels of training images containing labels by frequency. filter out labels that are not indicative or not having strong correlation. k-means clustering method uses a'selective' algorithm to predict labels. a clustering method uses a'selective' algorithm to predict labels. a clustering method uses a'selective' algorithm to predict labels. a clustering method uses a'selective' algorithm to predict labels", "sum_t5_words": 58, "sum_t5_runtime": 7.08, "runtime": 0.005, "nltk_category": "Utilities", "nltk_category_score": 0.6800950765609741, "nltk_category_runtime": 16.712, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9561944007873535, "nltk_subcategory_runtime": 26.984, "category": "Utilities", "category_score": 0.6800950765609741, "subcategory": "Machine Learning", "subcategory_score": 0.9561944007873535, "runtime_cat": 43.696, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.684", "language_code": "en", "language_score": "0.9999971164774183", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "overviewinput training data image url label goal generate prediction label test set image key step strategy rank google label training image frequency filter label indicative strong correlation wishcom label google label extract training image containing label corresponding wishcom label aggregate wishcom label rank according frequency filter label frequency le certain threshold hypothesis frequent wishcom label correlated google label use google label indicator wishcom label detect google label test image assign corresponding wishcom test image cluster training image extract frequent label cluster hypothesis image cluster label common use google label detect cluster test image belongs add common label cluster test image remove duplicate wishcom label test image full strategy detail use google vision api detect label 10000 image training set aggregate label together rank frequency filter top 10 frequent label indicative circumstance also filter label frequency le threshold name table generated step ranking table label ranking table identify training image containing label aggregate corresponding wishcom label together aggregate wishcom label rank according frequency filter wishcom label frequency lower threshold hypothesis frequent wishcom label correlated google label use google label indicator wishcom label step table indicating matching relationship generated name table matching table use google vision api detect label image test set google label image append matching wishcom label matching table step table named prediction table generated column predicted label super long many duplicate label remove duplicate label later use kmeans clustering method assign 10000 training set image 60 cluster cluster select training set image belonging cluster aggregate corresponding wishcom label rank label frequency select top 5 frequent label representative label cluster step table indicating representative label cluster generated name table cluster table test set image identify cluster belongs test set image predicted label contain three representative label cluster would say image belongs cluster assign representative label label remove duplicate label test set image found duplicate label affect fscore prediction flow chart", "tags_descriptive": []}