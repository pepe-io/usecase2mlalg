{"title": "PANDA concat tile pooling starter [0.79 LB]", "description": "DescriptionWelcome to Prostate cANcer graDe Assessment (PANDA) Challenge. The task of this competition is classification of images with cancer tissue. The main challenge of this task is dealing with images of extremely high resolution and large areas of empty space. So, effective locating the areas of concern and zooming them in would be the key to reach high LB score. In this competition I found a number of public kernels performing straightforward rescaling the input images to square. However, for this particular data such an approach is not very efficient because the aspect ratio and size of provided images are not consistent and vary in a wide range. As a result, the input images are deformed to large extend in a not consistent manner uppon rescaling that limits the ability of the model to learn. Moreover, the input consists of large empty areas leading to inefficient use of GPU memory and GPU time. In this kernel I propose an alternative approach based on Concatenate Tile pooling. Instead of passing an entire image as an input, N tiles are selected from each image based on the number of tissue pixels (see this kernel for description of data preparation and the corresponding dataset) and passed independently through the convolutional part. The outputs of the convolutional part is concatenated in a large single map for each image preceding pooling and FC head (see image below). Since any spatial information is eliminated by the pooling layer, the Concat Tile pooling approach is nearly identical to passing an entire image through the convolutional part, excluding predictions for nearly empty regions, which do not contribute to the final prediction, and shuffle the remaining outputs into a square map of smaller size. Below I provide just a basic kernel only illustrating this approach. In my first trial I got 0.76 LB score, top 2 at the moment, and I believe it could be easily boosted to 0.80+. I hope you would enjoy my kernel, and please also check my submission kernel implementing the tile based approach.", "link": "https://www.kaggle.com/iafoss/panda-concat-tile-pooling-starter-0-79-lb", "tags": ["DL", "Classification"], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "pytorch"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-05-04 06:54:37", "date_scraped": "2020-12-13 16:03:25", "words": 339, "sentences": 15, "sum_nltk": "The main challenge of this task is dealing with images of extremely high resolution and large areas of empty space.\nIn this competition I found a number of public kernels performing straightforward rescaling the input images to square.\nMoreover, the input consists of large empty areas leading to inefficient use of GPU memory and GPU time.\nIn this kernel I propose an alternative approach based on Concatenate Tile pooling.\nInstead of passing an entire image as an input, N tiles are selected from each image based on the number of tissue pixels (see this kernel for description of data preparation and the corresponding dataset) and passed independently through the convolutional part.\nThe outputs of the convolutional part is concatenated in a large single map for each image preceding pooling and FC head (see image below).\nSince any spatial information is eliminated by the pooling layer, the Concat Tile pooling approach is nearly identical to passing an entire image through the convolutional part, excluding predictions for nearly empty regions, which do not contribute to the final prediction, and shuffle the remaining outputs into a square map of smaller size.", "sum_nltk_words": 182, "sum_nltk_runtime": 0.003, "sum_t5": "main challenge of this competition is classification of images with cancer tissue. main challenge is dealing with images of extremely high resolution and large areas of empty space. a concatenate tile pooling approach is nearly identical to passing an entire image as an input. the outputs of the convolutional part is concatenated in a large single map for each image. back to mail online home. back to the page you came from. back to the page you came from.", "sum_t5_words": 79, "sum_t5_runtime": 6.245, "runtime": 0.005, "nltk_category": "Utilities", "nltk_category_score": 0.25195780396461487, "nltk_category_runtime": 15.549, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.8102410435676575, "nltk_subcategory_runtime": 24.903, "category": "Utilities", "category_score": 0.25195780396461487, "subcategory": "Machine Learning", "subcategory_score": 0.8102410435676575, "runtime_cat": 40.451, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.771", "language_code": "en", "language_score": "0.9999951264473603", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "descriptionwelcome prostate cancer grade assessment panda challenge task competition classification image cancer tissue main challenge task dealing image extremely high resolution large area empty space effective locating area concern zooming would key reach high lb score competition found number public kernel performing straightforward rescaling input image square however particular data approach efficient aspect ratio size provided image consistent vary wide range result input image deformed large extend consistent manner uppon rescaling limit ability model learn moreover input consists large empty area leading inefficient use gpu memory gpu time kernel propose alternative approach based concatenate tile pooling instead passing entire image input n tile selected image based number tissue pixel see kernel description data preparation corresponding dataset passed independently convolutional part output convolutional part concatenated large single map image preceding pooling fc head see image since spatial information eliminated pooling layer concat tile pooling approach nearly identical passing entire image convolutional part excluding prediction nearly empty region contribute final prediction shuffle remaining output square map smaller size provide basic kernel illustrating approach first trial got 076 lb score top 2 moment believe could easily boosted 080 hope would enjoy kernel please also check submission kernel implementing tile based approach", "tags_descriptive": ["Deep Learning (DL)", "Classification"]}