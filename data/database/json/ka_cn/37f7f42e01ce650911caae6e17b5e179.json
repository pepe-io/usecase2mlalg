{"title": "0.18 loss - Simple Feature Extractors", "description": "Introduction  This kernel is a detailed guide for transfer learning on Dog Breeds problem, it's all about learning a new technique, evaluate it using only Kaggle training set without cheating.  The aim of this kernel is to show you how to use pre-trained CNN models as feature extractors, which one of the most effective transfer learning techniques.  A reasonable question comes to your mind, 'Wait, why do we have to use this technique, why don't we just use regular transfer learning ?', if you try to do so, you will figure out that the problem is pretty hard for a single model to handle (you would get higher loss and less accuracy).  It's even hard for humankind to distinguish between 120 dog breeds!, single poor CNN would struggle.   Explanation  Take look at general CNN architecture for image classification in two main parts, \u201cfeature extractor\u201d that based on conv-layers, and \u201cclassifier\u201d which usually based on fully connected layers:    Simply, feature extractor could be created as follow > (Feature Extractor = Pretrained Model - Late Fully Connected Layers)  For example, InceptionV3 feature extractor (without last FC layer) outputs 2048 vector for each image sample, each value represent a certain feature of dog image (Coded in numerical values of course), like Dog color?, How big is his head?, Shape of the eyes?, length of the tale?, Size? .. etc  Hence, more \"different\" feature extractors mean more features to be used to determine which breed does this dog belong.  So our strategy goes as the following,  Create 4 feature extractor using different pre-trained CNN models Extract features from raw data and stacks the features together. Use a simple DNN with one dense layer and a heavy dropout layer to figure out patterns in the feature extracted from the data.     The code is simple, concise and fully-commented. Feel free to ask for help / more info / more explanation in the comments.  Finally if this kernel helps you somehow, kindly don't forget to leave a little upvote.  ENJOY.", "link": "https://www.kaggle.com/phylake1337/0-18-loss-simple-feature-extractors", "tags": ["Transfer Learning"], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "tensorflow", "pattern"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-03-02 15:30:14", "date_scraped": "2020-12-12 18:55:48", "words": 353, "sentences": 12, "sum_nltk": "Introduction  This kernel is a detailed guide for transfer learning on Dog Breeds problem, it's all about learning a new technique, evaluate it using only Kaggle training set without cheating.\nThe aim of this kernel is to show you how to use pre-trained CNN models as feature extractors, which one of the most effective transfer learning techniques.\nA reasonable question comes to your mind, 'Wait, why do we have to use this technique, why don't we just use regular transfer learning ?', if you try to do so, you will figure out that the problem is pretty hard for a single model to handle (you would get higher loss and less accuracy).\nExplanation  Take look at general CNN architecture for image classification in two main parts, \u201cfeature extractor\u201d that based on conv-layers, and \u201cclassifier\u201d which usually based on fully connected layers:    Simply, feature extractor could be created as follow > (Feature Extractor = Pretrained Model - Late Fully Connected Layers)  For example, InceptionV3 feature extractor (without last FC layer) outputs 2048 vector for each image sample, each value represent a certain feature of dog image (Coded in numerical values of course), like Dog color?, How big is his head?, Shape of the eyes?, length of the tale?, Size?\nSo our strategy goes as the following,  Create 4 feature extractor using different pre-trained CNN models Extract features from raw data and stacks the features together.", "sum_nltk_words": 237, "sum_nltk_runtime": 0.004, "sum_t5": "this kernel is a detailed guide for transfer learning on Dog Breeds problem. it shows you how to use pre-trained CNN models as feature extractors. it's even hard for humankind to distinguish between 120 dog breeds!. the code is simple, concise and fully-commented. if this kernel helps you somehow, kindly don't forget to leave a little upvote. if this kernel helps you somehow, kindly don't forget to leave a little upvo", "sum_t5_words": 71, "sum_t5_runtime": 6.773, "runtime": 0.002, "nltk_category": "Utilities", "nltk_category_score": 0.013934082351624966, "nltk_category_runtime": 21.423, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.7635830640792847, "nltk_subcategory_runtime": 34.412, "category": "Utilities", "category_score": 0.013934082351624966, "subcategory": "Machine Learning", "subcategory_score": 0.7635830640792847, "runtime_cat": 55.835, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.656", "language_code": "en", "language_score": "0.9999992340869279", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "introduction kernel detailed guide transfer learning dog breed problem learning new technique evaluate using kaggle training set without cheating aim kernel show use pretrained cnn model feature extractor one effective transfer learning technique reasonable question come mind wait use technique dont use regular transfer learning try figure problem pretty hard single model handle would get higher loss le accuracy even hard humankind distinguish 120 dog breed single poor cnn would struggle explanation take look general cnn architecture image classification two main part feature extractor based convlayers classifier usually based fully connected layer simply feature extractor could created follow feature extractor pretrained model late fully connected layer example inceptionv3 feature extractor without last fc layer output 2048 vector image sample value represent certain feature dog image coded numerical value course like dog color big head shape eye length tale size etc hence different feature extractor mean feature used determine breed dog belong strategy go following create 4 feature extractor using different pretrained cnn model extract feature raw data stack feature together use simple dnn one dense layer heavy dropout layer figure pattern feature extracted data code simple concise fullycommented feel free ask help info explanation comment finally kernel help somehow kindly dont forget leave little upvote enjoy", "tags_descriptive": ["Transfer Learning"]}