{"title": "Game of Life - Z3 Constraint Satisfaction", "description": "Reverse Game of Life - Z3 Constraint SatisfactionConway's Game of Life is an example of 2D cellular automata. I have previously written an interactive playable demo of the forward version of this game:  https://life.jamesmcguigan.com/  Using the classic ruleset on a 25x25 board with wraparound, the game evolves at each timestep according to the following rules  Overpopulation: if a living cell is surrounded by more than three living cells, it dies. Stasis: if a living cell is surrounded by two or three living cells, it survives. Underpopulation: if a living cell is surrounded by fewer than two living cells, it dies. Reproduction: if a dead cell is surrounded by exactly three cells, it becomes a live cell.  Or expressed algebraicly:  living + 4-8 neighbours = dies living + 2-3 neighbours = lives living + 0-1 neighbour  = dies dead   +   3 neighbours = lives  To reverse the arrow of time:  any living cell must have had living 2-3 neighbours in the previous timestep any dead cell must have had either 0-1 or 4-8 neighbours in the previous timestep any dead cell with distance of greater than 2 from a living cell can be ignored and assumed to have 0 neighbours there are a near infinite number of self-contained patterns could have been born and died out in empty space however for the sake of the competition, ignoring them will greatly reduce the search space    Whilst there have been many proposed solutions involving CNN neural networks (when all you have is a hammer, everything looks like a nail), this is in fact a classic constraint satisfaction problem. Here are some previous examples of using the Z3 library  https://www.kaggle.com/jamesmcguigan/z3-sudoku-solver https://www.kaggle.com/jamesmcguigan/cryptarithmetic-solver", "link": "https://www.kaggle.com/jamesmcguigan/game-of-life-z3-constraint-satisfaction", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["pattern"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-11-30 23:36:29", "date_scraped": "2020-12-12 17:58:02", "words": 293, "sentences": 7, "sum_nltk": "Reverse Game of Life - Z3 Constraint SatisfactionConway's Game of Life is an example of 2D cellular automata.\nI have previously written an interactive playable demo of the forward version of this game:  https://life.jamesmcguigan.com/  Using the classic ruleset on a 25x25 board with wraparound, the game evolves at each timestep according to the following rules  Overpopulation: if a living cell is surrounded by more than three living cells, it dies.\nStasis: if a living cell is surrounded by two or three living cells, it survives.\nUnderpopulation: if a living cell is surrounded by fewer than two living cells, it dies.\nOr expressed algebraicly:  living + 4-8 neighbours = dies living + 2-3 neighbours = lives living + 0-1 neighbour  = dies dead   +   3 neighbours = lives  To reverse the arrow of time:  any living cell must have had living 2-3 neighbours in the previous timestep any dead cell must have had either 0-1 or 4-8 neighbours in the previous timestep any dead cell with distance of greater than 2 from a living cell can be ignored and assumed to have 0 neighbours there are a near infinite number of self-contained patterns could have been born and died out in empty space however for the sake of the competition, ignoring them will greatly reduce the search space    Whilst there have been many proposed solutions involving CNN neural networks (when all you have is a hammer, everything looks like a nail), this is in fact a classic constraint satisfaction problem.", "sum_nltk_words": 259, "sum_nltk_runtime": 0.003, "sum_t5": "a living cell is surrounded by more than three living cells, it dies. if it is surrounded by exactly three cells, it becomes a live cell. if a dead cell is surrounded by exactly three cells, it becomes a live cell. if a dead cell is surrounded by exactly three cells, it becomes a live cell. if a living cell is surrounded by exactly three cells, it becomes a live cell.", "sum_t5_words": 71, "sum_t5_runtime": 6.216, "runtime": 0.002, "nltk_category": "Biotechnological & Life Sciences", "nltk_category_score": 0.03339076414704323, "nltk_category_runtime": 23.187, "nltk_subcategory": "Judicial Applied", "nltk_subcategory_score": 0.07325593382120132, "nltk_subcategory_runtime": 37.854, "category": "Biotechnological & Life Sciences", "category_score": 0.03339076414704323, "subcategory": "Judicial Applied", "subcategory_score": 0.07325593382120132, "runtime_cat": 61.041, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.716", "language_code": "en", "language_score": "0.9999966195330041", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "reverse game life z3 constraint satisfactionconways game life example 2d cellular automaton previously written interactive playable demo forward version game httpslifejamesmcguigancom using classic ruleset 25x25 board wraparound game evolves timestep according following rule overpopulation living cell surrounded three living cell dy stasis living cell surrounded two three living cell survives underpopulation living cell surrounded fewer two living cell dy reproduction dead cell surrounded exactly three cell becomes live cell expressed algebraicly living 48 neighbour dy living 23 neighbour life living 01 neighbour dy dead 3 neighbour life reverse arrow time living cell must living 23 neighbour previous timestep dead cell must either 01 48 neighbour previous timestep dead cell distance greater 2 living cell ignored assumed 0 neighbour near infinite number selfcontained pattern could born died empty space however sake competition ignoring greatly reduce search space whilst many proposed solution involving cnn neural network hammer everything look like nail fact classic constraint satisfaction problem previous example using z3 library httpswwwkagglecomjamesmcguiganz3sudokusolver httpswwwkagglecomjamesmcguigancryptarithmeticsolver", "tags_descriptive": []}