{"title": "ResUNet Keras with some new ideas", "description": "About this kernelMostly copied from xhlulu's kernel Satellite Clouds: U-Net with ResNet boilerplate. I have added some new ideas such as gradient accumulation, gamma correction from discussions and other kernels. I am new to the field of image processing. So please correct me if you have found any mistake. Thank you very much. Changelog V13: Set threshold/remove small masks/TTA of ResUnet18's prediction. V12: Save history to .csv. V11: Reset the learning parameters back to V7. Try Resnet34 encoder. Add some visualisation on test predictions. V9: Increased the initial learning rate to 0.005. Increased min_delta to 0.0005.  V7: Added gamma correction with gamma=0.8. Decreased min_delta to 0.0001. V3: Added EarlyStopping and ReduceLROnPlateau with min_delta=0.001. Increased the initial learning rate to 0.002. V2: Added gradient accumulation  References Satellite Clouds: U-Net with ResNet boilerplate: https://www.kaggle.com/xhlulu/satellite-clouds-u-net-with-resnet-boilerplate Segmentation in PyTorch using convenient tools: https://www.kaggle.com/artgor/segmentation-in-pytorch-using-convenient-tools A trick to use bigger batches for training: gradient accumulation: https://www.kaggle.com/c/understanding_cloud_organization/discussion/105614#latest-616444 [LB 0.628] simple segmentation approach: https://www.kaggle.com/c/understanding_cloud_organization/discussion/104771#latest-614917 Understanding Clouds Keras Unet: https://www.kaggle.com/saneryee/understanding-clouds-keras-unet Understanding Clouds - EDA and Keras U-Net: https://www.kaggle.com/dimitreoliveira/understanding-clouds-eda-and-keras-u-net", "link": "https://www.kaggle.com/gogo827jz/resunet-keras-with-some-new-ideas", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "albumentations", "pytorch", "sklearn", "skimage"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-10-08 22:54:29", "date_scraped": "2020-12-13 18:07:53", "words": 171, "sentences": 17, "runtime": 0.003, "description_category": "Biotechnological & Life Sciences", "description_category_score": 0.2851788103580475, "description_category_runtime": 33.003, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.8673526644706726, "description_subcategory_runtime": 52.34, "category": "Biotechnological & Life Sciences", "category_score": 0.2851788103580475, "subcategory": "Machine Learning", "subcategory_score": 0.8673526644706726, "runtime_cat": 85.343, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.745", "language_code": "en", "language_score": "0.9999964598820008", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "kernelmostly copied xhlulus kernel satellite cloud unet resnet boilerplate added new idea gradient accumulation gamma correction discussion kernel new field image processing please correct found mistake thank much changelog v13 set thresholdremove small maskstta resunet18s prediction v12 save history csv v11 reset learning parameter back v7 try resnet34 encoder add visualisation test prediction v9 increased initial learning rate 0005 increased min_delta 00005 v7 added gamma correction gamma08 decreased min_delta 00001 v3 added earlystopping reducelronplateau min_delta0001 increased initial learning rate 0002 v2 added gradient accumulation reference satellite cloud unet resnet boilerplate httpswwwkagglecomxhlulusatellitecloudsunetwithresnetboilerplate segmentation pytorch using convenient tool httpswwwkagglecomartgorsegmentationinpytorchusingconvenienttools trick use bigger batch training gradient accumulation httpswwwkagglecomcunderstanding_cloud_organizationdiscussion105614latest616444 lb 0628 simple segmentation approach httpswwwkagglecomcunderstanding_cloud_organizationdiscussion104771latest614917 understanding cloud kera unet httpswwwkagglecomsaneryeeunderstandingcloudskerasunet understanding cloud eda kera unet httpswwwkagglecomdimitreoliveiraunderstandingcloudsedaandkerasunet", "tags_descriptive": []}