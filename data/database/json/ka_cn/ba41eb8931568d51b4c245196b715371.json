{"title": "[NCAAW20] (finally) no-leak starter with LGB", "description": "OverviewAs it has been pointed out in the discussion (e.g. https://www.kaggle.com/c/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament/discussion/131028), most of the high scoring public kernels have a leak. That includes mine, apparently. The main cause of this is that they (intentionally or not) ignore the chronological order of the data. In this case you end up with having many cases where the future data are used by a model to predict the past, causing a leak. One way to avoid such situations is apparently to use only the past data to predict the future, like using only ~2018 to predict 2019. Here I implemented such a validation strategy. The log_loss in the end should be around 0.5 if you are truely successful, as is always the case with the winners in the past competitions.", "link": "https://www.kaggle.com/code1110/ncaaw20-finally-no-leak-starter-with-lgb", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["keras", "xgboost", "tensorflow", "lightgbm", "sklearn", "catboost"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-02-24 01:37:50", "date_scraped": "2020-12-12 20:19:12", "words": 127, "sentences": 8, "runtime": 0.002, "description_category": "Manufacturing", "description_category_score": 0.2722322642803192, "description_category_runtime": 13.448, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.4769764244556427, "description_subcategory_runtime": 21.543, "category": "Manufacturing", "category_score": 0.2722322642803192, "subcategory": "Machine Learning", "subcategory_score": 0.4769764244556427, "runtime_cat": 34.99, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.615", "language_code": "en", "language_score": "0.9999971722717838", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "overviewas pointed discussion eg httpswwwkagglecomcgooglecloudncaamarchmadness2020division1menstournamentdiscussion131028 high scoring public kernel leak includes mine apparently main cause intentionally ignore chronological order data case end many case future data used model predict past causing leak one way avoid situation apparently use past data predict future like using 2018 predict 2019 implemented validation strategy log_loss end around 05 truely successful always case winner past competition", "tags_descriptive": []}