{"title": "5. Implicit Promotional Pathways Discoverability", "description": "Data Science For Good : CoLA A Complete Pipeline for Structuring, Analysis and Recommendation Improve Hiring Process and Decisions  Key Objectives: Keeping these challenges in mind, an ideal solution for the City of Los Angeles has following key objectives: Develop an nlp framework to accurately structurize the job descriptions. Develop an analysis framework to identify the implict bias in the text and encourage diversity. Develop a system which can clearly identify the promotion pathways within the organization.My Submission: Following are parts of Kernels Submissions in order:  Part 1: Job Bulletin Structuring Engine - City of Los Angeles   Part 2: Encourage Diversity and Remove Unconsious Bias from Job Bulletins - A Deep Analysis  Part 3: Impact of Content, Tone, and Language : CTL Analysis for CoLA  Part 4: Increasing the Discoverability of Promotional Pathways (Explicit)   Part 5: Implicit Promotional Pathways Discoverability Part 5: Implicit - Promotional Pathways Discoverability Other Parts: Part 1 | Part 2 | Part 3 | Part 4 | Part 5  In the last kernel, I explored the method to identify and visualize promotional pathways which are mentioned explicitly in the job requirements. In this kernel, I have made an attempt to identify the promotional pathways using the contextual anlaysis of job requirements (implict). I have shared the methodology below: Methodology:  From the structured data, obtain the complete requirement text and perform basic text cleaning.    Represent every requirement text as a vector in which the context and semantics are preserved. I have used Pre-Trained Word Embeddings using fasttext for this purpose. For every job class requirement, representing it as a vector is very helpful as the word embedding vectors can be used to identify other job classes which shares similar requirements. In cases when a job class is not mentioned explicitly in the requirment, this method can be used to identify implict links.    Compute a contextual similarity matrix which gives similarity scores of one class with the others.   Use the similarity matrix to identify possible candidates. Filter them using a dictionary of seniority levels and flexible ngram matching to ensure that parent job class is actually linked to a child job class.    The overview of the methodology is shown in the following process flow diagram.    There are two parts in this method: A: Pre-Processing Stage : Compute requirement context vectors, and context similarity matrix B: Identification Stage : Finding the implicit links using similarity scores, dictionary, and ngram matching. Following are the contents of the kernel: Contents:1. Load Pre-Trained Word Embeddings 2. Load and Clean the Requirements Text Data 3. Convert Requirements to Requirements Context Vectors 4. Compute Contextual Similarity Matrix 5. Identify and Filter the Implicit Links 6. Write the Visualization Functions 7. Examples  1. Load Pre-Trained Word EmbeddingsA popular idea in modern machine learning is to represent words by vectors (also called word embeddings). These vectors capture hidden information about a language, like word analogies or semantic. Let's load the 2M word embedding vectors in a python object from fasttext dataset.", "link": "https://www.kaggle.com/shivamb/5-implicit-promotional-pathways-discoverability", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "nltk"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-06-21 13:39:10", "date_scraped": "2020-12-12 18:42:37", "words": 520, "sentences": 25, "sum_nltk": "Develop a system which can clearly identify the promotion pathways within the organization.My Submission: Following are parts of Kernels Submissions in order:  Part 1: Job Bulletin Structuring Engine - City of Los Angeles   Part 2: Encourage Diversity and Remove Unconsious Bias from Job Bulletins - A Deep Analysis  Part 3: Impact of Content, Tone, and Language : CTL Analysis for CoLA  Part 4: Increasing the Discoverability of Promotional Pathways (Explicit)   Part 5: Implicit Promotional Pathways Discoverability Part 5: Implicit - Promotional Pathways Discoverability Other Parts: Part 1 | Part 2 | Part 3 | Part 4 | Part 5  In the last kernel, I explored the method to identify and visualize promotional pathways which are mentioned explicitly in the job requirements.\nFor every job class requirement, representing it as a vector is very helpful as the word embedding vectors can be used to identify other job classes which shares similar requirements.\nIn cases when a job class is not mentioned explicitly in the requirment, this method can be used to identify implict links.\nThere are two parts in this method: A: Pre-Processing Stage : Compute requirement context vectors, and context similarity matrix B: Identification Stage : Finding the implicit links using similarity scores, dictionary, and ngram matching.", "sum_nltk_words": 212, "sum_nltk_runtime": 0.006, "sum_t5": "a co-author has shared a method to identify promotional pathways. the method uses a vector to represent job class requirements. the method is also used to identify implict links. the city of los angeles is currently implementing a new nlp framework. the city is also working on a new system to analyze job bulletins. a new method is being developed to help employers identify the promotion pathways. a new method is being developed to help employers identify the promotion pathways.", "sum_t5_words": 80, "sum_t5_runtime": 7.008, "runtime": 0.007, "nltk_category": "Construction & Engineering", "nltk_category_score": 0.2584521770477295, "nltk_category_runtime": 19.133, "nltk_subcategory": "Student", "nltk_subcategory_score": 0.27683401107788086, "nltk_subcategory_runtime": 30.174, "category": "Construction & Engineering", "category_score": 0.2584521770477295, "subcategory": "Student", "subcategory_score": 0.27683401107788086, "runtime_cat": 49.307, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.644", "language_code": "en", "language_score": "0.9999978205554793", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "data science good cola complete pipeline structuring analysis recommendation improve hiring process decision key objective keeping challenge mind ideal solution city los angeles following key objective develop nlp framework accurately structurize job description develop analysis framework identify implict bias text encourage diversity develop system clearly identify promotion pathway within organizationmy submission following part kernel submission order part 1 job bulletin structuring engine city los angeles part 2 encourage diversity remove unconsious bias job bulletin deep analysis part 3 impact content tone language ctl analysis cola part 4 increasing discoverability promotional pathway explicit part 5 implicit promotional pathway discoverability part 5 implicit promotional pathway discoverability part part 1 part 2 part 3 part 4 part 5 last kernel explored method identify visualize promotional pathway mentioned explicitly job requirement kernel made attempt identify promotional pathway using contextual anlaysis job requirement implict shared methodology methodology structured data obtain complete requirement text perform basic text cleaning represent every requirement text vector context semantics preserved used pretrained word embeddings using fasttext purpose every job class requirement representing vector helpful word embedding vector used identify job class share similar requirement case job class mentioned explicitly requirment method used identify implict link compute contextual similarity matrix give similarity score one class others use similarity matrix identify possible candidate filter using dictionary seniority level flexible ngram matching ensure parent job class actually linked child job class overview methodology shown following process flow diagram two part method preprocessing stage compute requirement context vector context similarity matrix b identification stage finding implicit link using similarity score dictionary ngram matching following content kernel contents1 load pretrained word embeddings 2 load clean requirement text data 3 convert requirement requirement context vector 4 compute contextual similarity matrix 5 identify filter implicit link 6 write visualization function 7 example 1 load pretrained word embeddingsa popular idea modern machine learning represent word vector also called word embeddings vector capture hidden information language like word analogy semantic let load 2m word embedding vector python object fasttext dataset", "tags_descriptive": []}