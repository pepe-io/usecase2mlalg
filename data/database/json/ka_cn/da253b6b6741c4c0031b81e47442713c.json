{"title": "Reference Model", "description": "Level 5 Kaggle Reference ModelAuthor: Guido Zuidhof - gzuidhof@lyft.com  In this Kernel we provide a (near) end-to-end example solution for the Lyft Level 5 Kaggle competition. We train a U-Net fully convolutional neural network to predict whether a car or other object is present for every pixel in a birds eye view of the world centered on the car. We can then threshold this probability map and fit boxes around each of the detections. You can expect to train the model in a couple of hours on a modern GPU, with inference times under 30ms per image. OutlineA. Creating an index and splitting into train and validation scenes Loading the dataset Creating a dataframe with one scene per row. Splitting all data into a train and validation set by car  B. Creating input and targets We produce top-down images and targets Running this on all of the data in parallel  C. Training a network to segment objects Defining datasets / dataloaders Defining the network architecture (U-net) Training the model  D. Inference and postprocessing Predicting our validation set. Thresholding the probability map. Performing a morphological closing operation to filter out tiny objects (presuming they are false positives) Loading the ground truth backprojecting our predicted boxes into world space  E. Visualizing the results (not included in this kernel)x. Creating top down visualizations of the ground truth and predictions using the nuScenes SDK. x. (Optional) Creating a GIF of a scene. F. Evaluationx. Computing mAP.", "link": "https://www.kaggle.com/gzuidhof/reference-model", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["opencv-python", "pytorch", "Pillow"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2019-09-17 02:27:48", "date_scraped": "2020-12-12 16:08:01", "words": 247, "sentences": 19, "sum_nltk": "We train a U-Net fully convolutional neural network to predict whether a car or other object is present for every pixel in a birds eye view of the world centered on the car.\nWe can then threshold this probability map and fit boxes around each of the detections.\nYou can expect to train the model in a couple of hours on a modern GPU, with inference times under 30ms per image.\nCreating an index and splitting into train and validation scenes Loading the dataset Creating a dataframe with one scene per row.\nSplitting all data into a train and validation set by car  B.\nCreating input and targets We produce top-down images and targets Running this on all of the data in parallel  C.\nTraining a network to segment objects Defining datasets / dataloaders Defining the network architecture (U-net) Training the model  D.\nInference and postprocessing Predicting our validation set.\nThresholding the probability map.\nPerforming a morphological closing operation to filter out tiny objects (presuming they are false positives) Loading the ground truth backprojecting our predicted boxes into world space  E.\nVisualizing the results (not included in this kernel)x.\nCreating top down visualizations of the ground truth and predictions using the nuScenes SDK.", "sum_nltk_words": 196, "sum_nltk_runtime": 0.004, "sum_t5": "a neural network predicts whether a car or other object is present for every pixel in a birds eye view of the world centered on the car. we then threshold this probability map and fit boxes around each of the detections. you can expect to train the model in a couple of hours on a modern GPU, with inference times under 30ms per image. you can expect to train the model in a couple of hours on a modern GPU, with inference times under 30ms per image", "sum_t5_words": 87, "sum_t5_runtime": 6.429, "runtime": 0.002, "nltk_category": "Utilities", "nltk_category_score": 0.47206100821495056, "nltk_category_runtime": 18.058, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9654306769371033, "nltk_subcategory_runtime": 29.129, "category": "Utilities", "category_score": 0.47206100821495056, "subcategory": "Machine Learning", "subcategory_score": 0.9654306769371033, "runtime_cat": 47.187, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.758", "language_code": "en", "language_score": "0.9999951980264261", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "level 5 kaggle reference modelauthor guido zuidhof gzuidhoflyftcom kernel provide near endtoend example solution lyft level 5 kaggle competition train unet fully convolutional neural network predict whether car object present every pixel bird eye view world centered car threshold probability map fit box around detection expect train model couple hour modern gpu inference time 30ms per image outlinea creating index splitting train validation scene loading dataset creating dataframe one scene per row splitting data train validation set car b creating input target produce topdown image target running data parallel c training network segment object defining datasets dataloaders defining network architecture unet training model inference postprocessing predicting validation set thresholding probability map performing morphological closing operation filter tiny object presuming false positive loading ground truth backprojecting predicted box world space e visualizing result included kernelx creating top visualization ground truth prediction using nuscenes sdk x optional creating gif scene f evaluationx computing map", "tags_descriptive": []}