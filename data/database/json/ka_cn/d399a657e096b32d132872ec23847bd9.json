{"title": "Dog-Cat Classifier+ GradCAM with Tensorflow 2.0", "description": "Dog-Cat Classifier (VGG) + GradCAM with TF 2.0In this Notebook:  Observe CAM with ResNet50 trained model on ImageNet Retrain output layer of ResNet50 model with Dog vs Cat data Add Fully connected layers before output layer and train Observe GradCAM with the re-trained models  Following is the architecture of ResNet50. It does not have fully-connected layers (FC) between pooling layer v\u00e0 output layers. Therefore, to check if GradCAM is really effective with the presence of FC layers, I will train a model with additional FC layers to ResNet50 and see how GradCAM works. Visualization with Ipython Widget that can be run locally: https://github.com/nguyenhoa93/GradCAM_and_GuidedGradCAM_tf2 Image source: Qingge Ji et al.  Table of contents1. Data preparation 2. Data exploration 3. GradCAM & GuidedBackProp Class definition  GradCAM GuidedBackprop  4. Observe GradCAM & Guided GradCAM with ResNet50 trained on ImageNet 5. Re-train output layer of ResNet50 model on dogs and cats data  Data generator Model Compile Train Observe GradCAM & Guided GradCAM  6. Add FC layers and train  Training Observe GradCAM & Guided GradCAM  7. References", "link": "https://www.kaggle.com/nguyenhoa/dog-cat-classifier-gradcam-with-tensorflow-2-0", "tags": ["Model Explainability"], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "keras", "tensorflow"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2020-07-29 19:51:51", "date_scraped": "2020-12-12 18:56:58", "words": 181, "sentences": 12, "runtime": 0.002, "description_category": "Education & Research", "description_category_score": 0.11520364880561829, "description_category_runtime": 20.669, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.9690594673156738, "description_subcategory_runtime": 33.64, "category": "Education & Research", "category_score": 0.11520364880561829, "subcategory": "Machine Learning", "subcategory_score": 0.9690594673156738, "runtime_cat": 54.309, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.685", "language_code": "en", "language_score": "0.9999964734033773", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "dogcat classifier vgg gradcam tf 20in notebook observe cam resnet50 trained model imagenet retrain output layer resnet50 model dog v cat data add fully connected layer output layer train observe gradcam retrained model following architecture resnet50 fullyconnected layer fc pooling layer va output layer therefore check gradcam really effective presence fc layer train model additional fc layer resnet50 see gradcam work visualization ipython widget run locally httpsgithubcomnguyenhoa93gradcam_and_guidedgradcam_tf2 image source qingge ji et al table contents1 data preparation 2 data exploration 3 gradcam guidedbackprop class definition gradcam guidedbackprop 4 observe gradcam guided gradcam resnet50 trained imagenet 5 retrain output layer resnet50 model dog cat data data generator model compile train observe gradcam guided gradcam 6 add fc layer train training observe gradcam guided gradcam 7 reference", "tags_descriptive": ["Model Explainability"]}