{"title": "R Mxnet simple tutorial", "description": "This kernel is intended as a simple end-to-end tutorial with local validation using mxnet, one of the few deep learning frameworks for R. There are not that many mxnet examples in the web so I hope this template will be a usefull starting point for those beginning to build their first convolutional networks. Mxnet updated version has more functions to explore that I will not be using, exploring them can be your next step. Being this just a template-tutorial and limited by Kaggle kernel environment we will be using a very much reduced image resolution 64x64 and cpu mode (convnets training is much faster on gpus, more on that later). Also convnet architecture will be very simple, just two convolutional layers with pooling. With this in mind, lets make clear what the kernel will and achieve:  A simple image preprocessing pipeline that ends with dimensions ready for mxnet training. A two convolutional layer, two pooling net for clasification. A clasification result almost as good as one achieved by a dart throwing monkey, (with three classes a monkey would get a logloss of (log(3) =  1.098612))  ( EDIT: We get a probably too optimistic error in our local validation of 0.9539. Better than expected. A submission with this exact parameters gets 1.04438 on LB. Worse than sample submission benchmark but still better than a monkey! ) Some parts of this code are taken from this fantastic kernel for State Farm Kaggle Competition here If you find this kernel useful remember to upvote!", "link": "https://www.kaggle.com/miguelpm/r-mxnet-simple-tutorial", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["mxnet"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2017-05-21 09:59:24", "date_scraped": "2020-12-13 11:58:48", "words": 254, "sentences": 11, "sum_nltk": "This kernel is intended as a simple end-to-end tutorial with local validation using mxnet, one of the few deep learning frameworks for R.\nThere are not that many mxnet examples in the web so I hope this template will be a usefull starting point for those beginning to build their first convolutional networks.\nBeing this just a template-tutorial and limited by Kaggle kernel environment we will be using a very much reduced image resolution 64x64 and cpu mode (convnets training is much faster on gpus, more on that later).\nAlso convnet architecture will be very simple, just two convolutional layers with pooling.\nWith this in mind, lets make clear what the kernel will and achieve:  A simple image preprocessing pipeline that ends with dimensions ready for mxnet training.\nA two convolutional layer, two pooling net for clasification.\nA clasification result almost as good as one achieved by a dart throwing monkey, (with three classes a monkey would get a logloss of (log(3) =  1.098612))  ( EDIT: We get a probably too optimistic error in our local validation of 0.9539.\nBetter than expected.\nA submission with this exact parameters gets 1.04438 on LB.\nWorse than sample submission benchmark but still better than a monkey!", "sum_nltk_words": 197, "sum_nltk_runtime": 0.003, "sum_t5": "this template is intended as a simple end-to-end tutorial with local validation. mxnet is one of the few deep learning frameworks for R. the kernel will be limited by Kaggle kernel environment. if you find this kernel useful remember to upvote.........................", "sum_t5_words": 41, "sum_t5_runtime": 5.633, "runtime": 0.0, "nltk_category": "Biotechnological & Life Sciences", "nltk_category_score": 0.2303839921951294, "nltk_category_runtime": 19.772, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.8879572749137878, "nltk_subcategory_runtime": 30.998, "category": "Biotechnological & Life Sciences", "category_score": 0.2303839921951294, "subcategory": "Machine Learning", "subcategory_score": 0.8879572749137878, "runtime_cat": 50.77, "programming_language": "R notebook", "ml_score": "1.0", "engagement_score": "0.77", "language_code": "en", "language_score": "0.9999974732219807", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "kernel intended simple endtoend tutorial local validation using mxnet one deep learning framework r many mxnet example web hope template usefull starting point beginning build first convolutional network mxnet updated version function explore using exploring next step templatetutorial limited kaggle kernel environment using much reduced image resolution 64x64 cpu mode convnets training much faster gpus later also convnet architecture simple two convolutional layer pooling mind let make clear kernel achieve simple image preprocessing pipeline end dimension ready mxnet training two convolutional layer two pooling net clasification clasification result almost good one achieved dart throwing monkey three class monkey would get logloss log3 1098612 edit get probably optimistic error local validation 09539 better expected submission exact parameter get 104438 lb worse sample submission benchmark still better monkey part code taken fantastic kernel state farm kaggle competition find kernel useful remember upvote", "tags_descriptive": []}