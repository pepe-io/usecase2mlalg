{"title": "Jiazhen to Armamut via gurchetan1000 - 0.56", "description": "Please go through Giba's post and kernel  to underrstand what this leak is all about https://www.kaggle.com/titericz/the-property-by-giba (kernel) https://www.kaggle.com/c/santander-value-prediction-challenge/discussion/61329 (post) Also, go through this Jiazhen's kernel which finds more columns to exploit leak https://www.kaggle.com/johnfarrell/giba-s-property-extended-result I just exploit data property in brute force way and then fill in remaining by row non zero means! This should bring everyone on level-playing field. Let the competition begin! :D Just some small modifications from original baseline~ The leak rows are calculated separately on train/test set Calculated the leaky values, correctness, for each lag Hope this can help to do some lag_selection  Update leak process codes to Dmitry Frumkin's fast version The result of Dmitry's original function and result of Hasan's function seem slightly different Modified to make the output consistent with Hasan's function (Seems better score)", "link": "https://www.kaggle.com/nulldata/jiazhen-to-armamut-via-gurchetan1000-0-56", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "pattern", "lightgbm"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2018-08-17 14:25:45", "date_scraped": "2020-12-13 17:15:37", "words": 133, "sentences": 2, "runtime": 0.005, "description_category": "Utilities", "description_category_score": 0.2847929894924164, "description_category_runtime": 16.621, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.6783831119537354, "description_subcategory_runtime": 26.288, "category": "Utilities", "category_score": 0.2847929894924164, "subcategory": "Machine Learning", "subcategory_score": 0.6783831119537354, "runtime_cat": 42.912, "programming_language": "Jupyter Notebook", "ml_score": "0.7", "engagement_score": "0.747", "language_code": "en", "language_score": "0.9999981448732195", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "please go gibas post kernel underrstand leak httpswwwkagglecomtitericzthepropertybygiba kernel httpswwwkagglecomcsantandervaluepredictionchallengediscussion61329 post also go jiazhens kernel find column exploit leak httpswwwkagglecomjohnfarrellgibaspropertyextendedresult exploit data property brute force way fill remaining row non zero mean bring everyone levelplaying field let competition begin small modification original baseline leak row calculated separately traintest set calculated leaky value correctness lag hope help lag_selection update leak process code dmitry frumkins fast version result dmitrys original function result hasans function seem slightly different modified make output consistent hasans function seems better score", "tags_descriptive": []}