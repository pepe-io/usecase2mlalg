{"title": "Classifying/tagging sequences", "description": "Classifying sequencesThis Kaggle competition is unusual from a machine learning perspective as it doesn't necessarily require any learning; each sequence is independent, and some can be solved directly. Others can be estimated using ML techniques that may or may not be appropriate for finding their generating function. ML techniques used here face a problem typical to ML in general:  Just because a function or method appears to solve a sequence, it doesn't necessarily follow that it's the correct function. Being able to describe the existing data doesn't necessarily mean it's possible to accurately predict new data. Claiming the latter without adequate cross-validation and testing would amount to circular reasoning: \"If a sequence is solved by x then it's of type x and should be solved by x.\" One approach to help mitigate the false positives and circular reasoning problems would be to apply a priori knowledge of the properties of a sequence to make a more informed decision about appropriate approaches to try, rather than blindly attempting all possible approaches and scoring/comparing them afterwards. In order to do this in an efficient automated fashion, it is presumably necessary to tag the basic properties of each sequence beforehand. Sequences on the OEIS are tagged with keywords, but the majority of these appear either subjective or require knowledge of  the generating function (http://oeis.org/wiki/Clear-cut_examples_of_keywords). Using them here would obviously be cheating. The purpose of this notebook is to suggest a few (possibly trivial) functions for automatically tagging fundamental properties of sequences without any reference the generating function. There are also a few examples at the end where the tags might inform decisions. Suggestions for other tags and their potential usefulness are welcomed. A few possible types of tags:  \"Basic\" - A description of what the sequence looks like, these are what we'll focus on here. \"Comparative\" -  Tagging a sequence as superficially similar to another (not included here). \"OEIS Keywords\" - Either similar to \"basic\" and already applied by OEIS automatically (eg. sign, nonn, short), or the manually applied OEIS keywords. \"Solvers\" - \"This function appears to be solved by this method\" (not included here to avoid circular reasoning).", "link": "https://www.kaggle.com/garethjns/classifying-tagging-sequences", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": [], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2016-08-30 00:24:36", "date_scraped": "2020-12-13 11:57:13", "words": 360, "sentences": 16, "sum_nltk": "ML techniques used here face a problem typical to ML in general:  Just because a function or method appears to solve a sequence, it doesn't necessarily follow that it's the correct function.\nClaiming the latter without adequate cross-validation and testing would amount to circular reasoning: \"If a sequence is solved by x then it's of type x and should be solved by x.\" One approach to help mitigate the false positives and circular reasoning problems would be to apply a priori knowledge of the properties of a sequence to make a more informed decision about appropriate approaches to try, rather than blindly attempting all possible approaches and scoring/comparing them afterwards.\nSequences on the OEIS are tagged with keywords, but the majority of these appear either subjective or require knowledge of  the generating function (http://oeis.org/wiki/Clear-cut_examples_of_keywords).\nThe purpose of this notebook is to suggest a few (possibly trivial) functions for automatically tagging fundamental properties of sequences without any reference the generating function.\n\"OEIS Keywords\" - Either similar to \"basic\" and already applied by OEIS automatically (eg.\n\"Solvers\" - \"This function appears to be solved by this method\" (not included here to avoid circular reasoning).", "sum_nltk_words": 189, "sum_nltk_runtime": 0.004, "sum_t5": "a few functions can be used to automatically tag fundamental properties of sequences. the majority of these appear either subjective or require knowledge of the generating function. the OEIS keyword tags are used to describe what a sequence looks like. the OEIS keyword tags are used to identify the generating function. the OEIS keyword tags are used to identify the generating function. a few examples at the end where the tags might inform decisions.", "sum_t5_words": 74, "sum_t5_runtime": 6.242, "runtime": 0.002, "nltk_category": "Construction & Engineering", "nltk_category_score": 0.07500073313713074, "nltk_category_runtime": 17.845, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.6505072116851807, "nltk_subcategory_runtime": 29.139, "category": "Construction & Engineering", "category_score": 0.07500073313713074, "subcategory": "Machine Learning", "subcategory_score": 0.6505072116851807, "runtime_cat": 46.985, "programming_language": "R notebook", "ml_score": "0.5", "engagement_score": "0.704", "language_code": "en", "language_score": "0.9999978911762182", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "classifying sequencesthis kaggle competition unusual machine learning perspective doesnt necessarily require learning sequence independent solved directly others estimated using ml technique may may appropriate finding generating function ml technique used face problem typical ml general function method appears solve sequence doesnt necessarily follow correct function able describe existing data doesnt necessarily mean possible accurately predict new data claiming latter without adequate crossvalidation testing would amount circular reasoning sequence solved x type x solved x one approach help mitigate false positive circular reasoning problem would apply priori knowledge property sequence make informed decision appropriate approach try rather blindly attempting possible approach scoringcomparing afterwards order efficient automated fashion presumably necessary tag basic property sequence beforehand sequence oeis tagged keywords majority appear either subjective require knowledge generating function httpoeisorgwikiclearcut_examples_of_keywords using would obviously cheating purpose notebook suggest possibly trivial function automatically tagging fundamental property sequence without reference generating function also example end tag might inform decision suggestion tag potential usefulness welcomed possible type tag basic description sequence look like well focus comparative tagging sequence superficially similar another included oeis keywords either similar basic already applied oeis automatically eg sign nonn short manually applied oeis keywords solver function appears solved method included avoid circular reasoning", "tags_descriptive": []}