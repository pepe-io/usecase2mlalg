{"title": "Cipher #1 & Cipher #2 Full Solutions", "description": "This kernel focuses on the cryptanalysis of the ciphers.  It contains a full manual cryptanalysis of cipher #1 before we move on to an automated one (cipher1_map.csv). It contains also the results of a full cryptanalysis of cipher #2 (cipher2_map.csv)  The sole purpose of the manual cryptanalysis illustrated on cipher #1 are:  To give an idea of what's doable manually on cipher #1 (spoiler alert: a lot) To demonstrate how tedious and time-consuming this manual analysis can be To illustrate the needs and requirements for automated cryptanalysis tools  (spoiler alert: fuzzywuzzy)  There is already a very nice automated kernel that has been published: https://www.kaggle.com/rturley/a-first-crack-tools-and-first-cipher-solution Here is the cryptanalysis plan we will follow:  Take advantage of the existing knowledge on the issue at hand, here we know that: The plaintexts corresponding to our ciphertexts are part of the 20 newsgroups dataset The cipher #1 is a substitution cipher: it is a simple table wich maps a plaintext character to a ciphertext character     Analyze the most frequent characters in the ciphertexts and compare them to the plaintexts ones.  Our hope is to be able to match a few usual suspects that pop out statistically in English like e or t.  And more importantly to identify words separators (the space or newline characters) which would allow us to move on to the next step   Analyze the most frequent words in the ciphertexts and compare them to the plaintexts ones. If we have partially decoded words that we can recognize then we can increase of knowledge of the cipher map   Complete the cryptanalysis by specifically looking for less frequent characters and matching plaintexts and ciphertexts pairs  In short: Characters > Words > Messages", "link": "https://www.kaggle.com/leflal/cipher-1-cipher-2-full-solutions", "tags": [], "kind": ["Project", "(Notebook)"], "ml_libs": ["sklearn", "pattern"], "host": "kaggle.com", "license": "Apache-2.0", "language": "english", "date_project": "2018-12-23 20:45:40", "date_scraped": "2020-12-12 16:01:56", "words": 296, "sentences": 6, "sum_nltk": "It contains also the results of a full cryptanalysis of cipher #2 (cipher2_map.csv)  The sole purpose of the manual cryptanalysis illustrated on cipher #1 are:  To give an idea of what's doable manually on cipher #1 (spoiler alert: a lot) To demonstrate how tedious and time-consuming this manual analysis can be To illustrate the needs and requirements for automated cryptanalysis tools  (spoiler alert: fuzzywuzzy)  There is already a very nice automated kernel that has been published: https://www.kaggle.com/rturley/a-first-crack-tools-and-first-cipher-solution Here is the cryptanalysis plan we will follow:  Take advantage of the existing knowledge on the issue at hand, here we know that: The plaintexts corresponding to our ciphertexts are part of the 20 newsgroups dataset The cipher #1 is a substitution cipher: it is a simple table wich maps a plaintext character to a ciphertext character     Analyze the most frequent characters in the ciphertexts and compare them to the plaintexts ones.\nAnd more importantly to identify words separators (the space or newline characters) which would allow us to move on to the next step   Analyze the most frequent words in the ciphertexts and compare them to the plaintexts ones.\nIf we have partially decoded words that we can recognize then we can increase of knowledge of the cipher map   Complete the cryptanalysis by specifically looking for less frequent characters and matching plaintexts and ciphertexts pairs  In short: Characters > Words > Messages", "sum_nltk_words": 242, "sum_nltk_runtime": 0.008, "sum_t5": "a kernel focusing on the cryptanalysis of the ciphers has been published. it contains a manual cryptanalysis of cipher #1 and results of an automated one. the goal is to match a few usual suspects that pop out statistically in english. the kernel is available on kaggle.com/rturley/a-first-crack-tools-and-first-cipher-solution. ciphers are a substitution cipher, a table", "sum_t5_words": 54, "sum_t5_runtime": 9.619, "runtime": 0.004, "nltk_category": "Utilities", "nltk_category_score": 0.3158451318740845, "nltk_category_runtime": 23.733, "nltk_subcategory": "Preventative and Reactive", "nltk_subcategory_score": 0.9296360015869141, "nltk_subcategory_runtime": 38.116, "category": "Utilities", "category_score": 0.3158451318740845, "subcategory": "Preventative and Reactive", "subcategory_score": 0.9296360015869141, "runtime_cat": 61.851, "programming_language": "Jupyter Notebook", "ml_score": "1.0", "engagement_score": "0.672", "language_code": "en", "language_score": "0.9999962223084473", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "kernel focus cryptanalysis cipher contains full manual cryptanalysis cipher 1 move automated one cipher1_mapcsv contains also result full cryptanalysis cipher 2 cipher2_mapcsv sole purpose manual cryptanalysis illustrated cipher 1 give idea whats doable manually cipher 1 spoiler alert lot demonstrate tedious timeconsuming manual analysis illustrate need requirement automated cryptanalysis tool spoiler alert fuzzywuzzy already nice automated kernel published httpswwwkagglecomrturleyafirstcracktoolsandfirstciphersolution cryptanalysis plan follow take advantage existing knowledge issue hand know plaintexts corresponding ciphertexts part 20 newsgroups dataset cipher 1 substitution cipher simple table wich map plaintext character ciphertext character analyze frequent character ciphertexts compare plaintexts one hope able match usual suspect pop statistically english like e importantly identify word separator space newline character would allow u move next step analyze frequent word ciphertexts compare plaintexts one partially decoded word recognize increase knowledge cipher map complete cryptanalysis specifically looking le frequent character matching plaintexts ciphertexts pair short character word message", "tags_descriptive": []}