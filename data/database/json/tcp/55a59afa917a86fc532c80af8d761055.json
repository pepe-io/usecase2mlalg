{"title": "COVID 19 Detection", "description": "One week ago, Dr Cohen started collecting X-ray images of COVID 19 cases and publishing them in the following\u00a0GitHub\u00a0repo, for the work of COVID 19 detection.Inside the repo you\u2019ll find example of COVID-19 cases, as well as MERS, SARS, and ARDS.In order to create the COVID 19 X-ray image dataset for this Article, I:In total, that left us with 25 X-ray images of positive COVID-19 cases(figure 2 left above).The next step was to sample X-ray images of healthy patients.To do so, I used\u00a0Chest X-Ray Images (Pneumonia) dataset\u00a0and sampled 25 X-ray images from healthy patients. There are a number of problems with  Chest X-Ray dataset, namely noisy/incorrect labels, but it served as a good enough starting point for this proof of concept COVID-19 detector.After gathering our dataset, we are left with 50 total images, equally split with 25 images of COVID-19 positive X-rays and 25 images of healthy patient X-rays.Lets start with importing the librariesTo load our data, we grab all paths to images in the dataset_dir directory . Then, for each imagePath, we:We then scale pixel intensities to the range [0, 1] and convert both our data and labels to NumPy array format.One-hot encoding of labels takes place meaning that our data will be in the following format: [[0. 1.] [0. 1.] [0. 1.] \u2026 [1. 0.] [1. 0.] [1. 0.]]Each encoded label consists of a two element array with one of the elements being \u201chot\u201d (i.e., 1) versus \u201cnot\u201d (i.e., 0).Then construct our data split, reserving 80% of the data for training and 20% for testing.In order to ensure that our model generalizes, we perform data augmentation by setting the random image rotation setting to 15 degrees clockwise or counterclockwise. We will Initialize the data augmentation generator object.We will instantiate the VGG16 network with weights pre-trained on ImageNet, leaving off the FC layer head.From there, we construct a new fully-connected layer head consisting of POOL => FC = SOFTMAX layers and append it on top of VGG16.We then freeze the CONV weights of VGG16 such that only the FC layer head will be trained; this completes our fine-tuning setup.compile the network with learning rate decay and the Adam optimizer. Given that this is a 2-class problem, we use \u201cbinary_crossentropy\u201d loss rather than categorical crossentropy.To kick off our COVID-19 neural network training process, we make a call to Keras\u2019 fit_generator method, while passing in our chest X-ray data via our data augmentation object.For evaluation, we first make predictions on the testing set and grab the prediction indices.We then generate and print out a classification report using scikit-learn\u2019s helper utility.", "link": "https://thecleverprogrammer.com/2020/07/09/covid-19-detection/", "tags": ["DL", "CNN", "ReLu", "VGG", "Classification"], "kind": "Project", "ml_libs": ["keras", "sklearn", "tensorflow", "imutils"], "host": "thecleverprogrammer.com", "language": "english", "date_project": "2020-07-09 12:11:11", "date_scraped": "2020-12-20 00:00:00", "words": 430, "sentences": 11, "sum_nltk": "There are a number of problems with  Chest X-Ray dataset, namely noisy/incorrect labels, but it served as a good enough starting point for this proof of concept COVID-19 detector.After gathering our dataset, we are left with 50 total images, equally split with 25 images of COVID-19 positive X-rays and 25 images of healthy patient X-rays.Lets start with importing the librariesTo load our data, we grab all paths to images in the dataset_dir directory .\n0.]]Each encoded label consists of a two element array with one of the elements being \u201chot\u201d (i.e., 1) versus \u201cnot\u201d (i.e., 0).Then construct our data split, reserving 80% of the data for training and 20% for testing.In order to ensure that our model generalizes, we perform data augmentation by setting the random image rotation setting to 15 degrees clockwise or counterclockwise.\nGiven that this is a 2-class problem, we use \u201cbinary_crossentropy\u201d loss rather than categorical crossentropy.To kick off our COVID-19 neural network training process, we make a call to Keras\u2019 fit_generator method, while passing in our chest X-ray data via our data augmentation object.For evaluation, we first make predictions on the testing set and grab the prediction indices.We then generate and print out a classification report using scikit-learn\u2019s helper utility.", "sum_nltk_words": 203, "sum_nltk_runtime": 0.004, "sum_t5": "one week ago, Dr. Cohen started collecting X-ray images of COVID 19 cases. he then published them in the following GitHub repo, for the work of COVID 19 detection. in the repo you\u2019ll find example of COVID-19 cases, as well as MERS, SARS, and ARDS. he used a Chest X-Ray Images (Pneumonia) dataset and sampled 25 X-ray images from healthy patients.", "sum_t5_words": 61, "sum_t5_runtime": 6.733, "runtime": 0.012, "nltk_category": "Healthcare", "nltk_category_score": 0.25566884875297546, "nltk_category_runtime": 21.267, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9808074831962585, "nltk_subcategory_runtime": 34.373, "category": "Healthcare", "category_score": 0.25566884875297546, "subcategory": "Machine Learning", "subcategory_score": 0.9808074831962585, "runtime_cat": 55.64, "programming_language": "Python", "ml_score": "1.0", "language_code": "en", "language_score": "0.9999978163767775", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "one week ago dr cohen started collecting xray image covid 19 case publishing following github repo work covid 19 detectioninside repo youll find example covid19 case well mers sars ardsin order create covid 19 xray image dataset article iin total left u 25 xray image positive covid19 casesfigure 2 left abovethe next step sample xray image healthy patientsto used chest xray image pneumonia dataset sampled 25 xray image healthy patient number problem chest xray dataset namely noisyincorrect label served good enough starting point proof concept covid19 detectorafter gathering dataset left 50 total image equally split 25 image covid19 positive xrays 25 image healthy patient xrayslets start importing librariesto load data grab path image dataset_dir directory imagepath wewe scale pixel intensity range 0 1 convert data label numpy array formatonehot encoding label take place meaning data following format 0 1 0 1 0 1 1 0 1 0 1 0each encoded label consists two element array one element hot ie 1 versus ie 0then construct data split reserving 80 data training 20 testingin order ensure model generalizes perform data augmentation setting random image rotation setting 15 degree clockwise counterclockwise initialize data augmentation generator objectwe instantiate vgg16 network weight pretrained imagenet leaving fc layer headfrom construct new fullyconnected layer head consisting pool fc softmax layer append top vgg16we freeze conv weight vgg16 fc layer head trained completes finetuning setupcompile network learning rate decay adam optimizer given 2class problem use binary_crossentropy loss rather categorical crossentropyto kick covid19 neural network training process make call kera fit_generator method passing chest xray data via data augmentation objectfor evaluation first make prediction testing set grab prediction indiceswe generate print classification report using scikitlearns helper utility", "tags_descriptive": ["Deep Learning (DL)", "Convolutional Neural Network (CNN)", "Rectified Linear Unit (ReLU)", "VGG", "Classification"]}