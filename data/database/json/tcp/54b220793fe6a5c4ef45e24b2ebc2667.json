{"title": "DNA Sequencing with Machine Learning", "description": "In this Data Science Project, I will apply a classification model with Machine Learning, that can predict a gene\u2019s function based on the DNA sequencing of the coding sequence alone.You can download the data sets we need for this project from here:We have some data for human DNA sequence coding regions and a class label. We also have data for Chimpanzee and a more divergent species, the dog.A challenge that remains is that none of these above methods results in vectors of uniform length, and that is a requirement for feeding data to a classification or regression algorithm. So with the above methods you have to resort to things like truncating sequences or padding with \u201cn\u201d or \u201c0\u201d to get vectors of uniform length.DNA and protein sequences can be viewed metaphorically as the language of life. The language encodes instructions as well as function for the molecules that are found in all life forms. Here I am using hexamer \u201cwords\u201d but that is arbitrary and word length can be tuned to suit the particular situation. The word length and amount of overlap need to be determined empirically for any given application.In genomics, we refer to these types of manipulations as \u201ck-mer counting\u201d, or counting the occurrences of each possible k-mer sequence. There are specialized tools for this, but the Python natural language processing tools make it super easy.Let\u2019s define a function to collect all possible overlapping k-mers of a specified length from any sequence string. Now we can convert our training data sequences into short overlapping k-mers of legth 6. Lets do that for each species of data we have using our getKmers function.Now, our coding sequence data is changed to lowercase, split up into all possible k-mer words of length 6 and ready for the next step. Let\u2019s take a look.Since we are going to use scikit-learn natural language processing tools to do the k-mer counting, we need to now convert the lists of k-mers for each gene into string sentences of words that the count vectorizer can use. We can also make a y variable to hold the class labels. Let\u2019s do that now.#Output\u2013array([4, 4, 3, \u2026, 6, 6, 6])#Output-(4380, 232414) (1682, 232414) (820, 232414)If we have a look at class balance we can see we have relatively balanced data set.#Output(3504, 232414) (876, 232414)A multinomial naive Bayes classifier will be created. I previously did some parameter tuning and found the ngram size of 4 (reflected in the Countvectorizer() instance) and a model alpha of 0.1 did the best.#Output-MultinomialNB(alpha=0.1, class_prior=None, fit_prior=True)Okay, so let\u2019s look at some model performance metrics like the confusion matrix, accuracy, precision, recall and f1 score. We are getting really good results on our unseen data, so it looks like our model did not overfit to the training data. In a real project I would go back and sample many more train test splits since we have a relatively small data set.", "link": "https://thecleverprogrammer.com/2020/05/23/data-science-project-dna-sequencing-with-machine-learning/", "tags": ["Regression", "NLP", "Naive Bayes", "Classification"], "kind": "Project", "ml_libs": ["sklearn"], "host": "thecleverprogrammer.com", "language": "english", "date_project": "2020-05-23 01:16:59", "date_scraped": "2020-12-20 00:00:00", "words": 486, "sentences": 15, "sum_nltk": "In this Data Science Project, I will apply a classification model with Machine Learning, that can predict a gene\u2019s function based on the DNA sequencing of the coding sequence alone.You can download the data sets we need for this project from here:We have some data for human DNA sequence coding regions and a class label.\nThere are specialized tools for this, but the Python natural language processing tools make it super easy.Let\u2019s define a function to collect all possible overlapping k-mers of a specified length from any sequence string.\nNow we can convert our training data sequences into short overlapping k-mers of legth 6.\nLets do that for each species of data we have using our getKmers function.Now, our coding sequence data is changed to lowercase, split up into all possible k-mer words of length 6 and ready for the next step.\nLet\u2019s take a look.Since we are going to use scikit-learn natural language processing tools to do the k-mer counting, we need to now convert the lists of k-mers for each gene into string sentences of words that the count vectorizer can use.\nWe are getting really good results on our unseen data, so it looks like our model did not overfit to the training data.", "sum_nltk_words": 202, "sum_nltk_runtime": 0.004, "sum_t5": "a class label can predict a gene\u2019s function based on the DNA sequencing of the coding sequence alone. a challenge remains that none of these methods results in vectors of uniform length, and that is a requirement for feeding data to a classification or regression algorithm. in genomics, we refer to these types of manipulations as \u2018k-mer counting\u2019 or counting the occurrences of each possible k-mer sequence. we need to convert the lists of k-mers for each gene into string sentences", "sum_t5_words": 81, "sum_t5_runtime": 7.065, "runtime": 0.008, "nltk_category": "Education & Research", "nltk_category_score": 0.3827754855155945, "nltk_category_runtime": 18.307, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.9544092416763306, "nltk_subcategory_runtime": 29.487, "category": "Education & Research", "category_score": 0.3827754855155945, "subcategory": "Machine Learning", "subcategory_score": 0.9544092416763306, "runtime_cat": 47.794, "programming_language": "Python", "ml_score": "1.0", "language_code": "en", "language_score": "0.9999970492059562", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "data science project apply classification model machine learning predict gene function based dna sequencing coding sequence aloneyou download data set need project herewe data human dna sequence coding region class label also data chimpanzee divergent specie doga challenge remains none method result vector uniform length requirement feeding data classification regression algorithm method resort thing like truncating sequence padding n 0 get vector uniform lengthdna protein sequence viewed metaphorically language life language encodes instruction well function molecule found life form using hexamer word arbitrary word length tuned suit particular situation word length amount overlap need determined empirically given applicationin genomics refer type manipulation kmer counting counting occurrence possible kmer sequence specialized tool python natural language processing tool make super easylets define function collect possible overlapping kmers specified length sequence string convert training data sequence short overlapping kmers legth 6 let specie data using getkmers functionnow coding sequence data changed lowercase split possible kmer word length 6 ready next step let take looksince going use scikitlearn natural language processing tool kmer counting need convert list kmers gene string sentence word count vectorizer use also make variable hold class label let nowoutputarray4 4 3 6 6 6output4380 232414 1682 232414 820 232414if look class balance see relatively balanced data setoutput3504 232414 876 232414a multinomial naive bayes classifier created previously parameter tuning found ngram size 4 reflected countvectorizer instance model alpha 01 bestoutputmultinomialnbalpha01 class_priornone fit_priortrueokay let look model performance metric like confusion matrix accuracy precision recall f1 score getting really good result unseen data look like model overfit training data real project would go back sample many train test split since relatively small data set", "tags_descriptive": ["Regression", "Natural Language Processing (NLP)", "Naive Bayes", "Classification"]}