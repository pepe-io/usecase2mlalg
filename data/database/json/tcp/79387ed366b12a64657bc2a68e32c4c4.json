{"title": "Stock Price Prediction with Machine Learning", "description": "In this Data Science Project we will create a Linear Regression model and a Decision Tree Regression Model to Predict Apple\u2019s Stock Price using Machine Learning and Python.Import pandas to import a CSV file:To get the number of training days:#Output- training days = (251, 7)To Visualize the close price Data:To get the close price:Creating a variable to predict \u2018X\u2019 days in the future:Create a new target column shifted \u2018X\u2019 units/days up:To create a feature dataset (x) and convert into a numpy array and remove last \u2018x\u2019 rows/days:#Output- [[185.720001][188.660004][190.919998][190.080002][189. ][183.089996][186.600006][182.779999][179.660004][178.970001][178.229996][177.380005][178.300003][175.070007][173.300003][179.639999][182.539993][185.220001][190.149994][192.580002][194.809998][194.190002][194.149994][192.740005][193.889999][198.449997][197.869995][199.460007][198.779999][198.580002][195.570007][199.800003][199.740005][197.919998][201.550003][202.729996][204.410004][204.229996][200.020004][201.240005][203.229996][201.75 ][203.300003][205.210007][204.5 ][203.350006][205.660004][202.589996][207.220001][208.839996][208.669998][207.020004][207.740005][209.679993][208.779999][213.039993][208.429993][204.020004][193.339996][197. ][199.039993][203.429993][200.990005][200.479996][208.970001][202.75 ][201.740005][206.5 ][210.350006][210.360001][212.639999][212.460007][202.639999][206.490005][204.160004][205.529999][209.009995][208.740005][205.699997][209.190002][213.279999][213.259995][214.169998][216.699997][223.589996][223.089996][218.75 ][219.899994][220.699997][222.770004][220.960007][217.729996][218.720001][217.679993][221.029999][219.889999][218.820007][223.970001][224.589996][218.960007][220.820007][227.009995][227.059998][224.399994][227.029999][230.089996][236.210007][235.869995][235.320007][234.369995][235.279999][236.410004][240.509995][239.960007][243.179993][243.580002][246.580002][249.050003][243.289993][243.259995][248.759995][255.820007][257.5 ][257.130005][257.23999 ][259.429993][260.140015][262.200012][261.959991][264.470001][262.640015][265.76001 ][267.100006][266.290009][263.190002][262.01001 ][261.779999][266.369995][264.290009][267.839996][267.25 ][264.160004][259.450012][261.73999 ][265.579987][270.709991][266.920013][268.480011][270.769989][271.459991][275.149994][279.859985][280.410004][279.73999 ][280.019989][279.440002][284. ][284.269989][289.910004][289.799988][291.519989][293.649994][300.350006][297.429993][299.799988][298.390015][303.190002][309.630005][310.329987][316.959991][312.679993][311.339996][315.23999 ][318.730011][316.570007][317.700012][319.230011][318.309998][308.950012][317.690002][324.339996][323.869995][309.51001 ][308.660004][318.850006][321.450012][325.209991][320.029999][321.549988][319.609985][327.200012][324.869995][324.950012][319. ][323.619995][320.299988][313.049988][298.179993][288.079987][292.649994][273.519989][273.359985][298.809998][289.320007][302.73999 ][292.920013][289.029999][266.170013][285.339996][275.429993][248.229996][277.970001][242.210007][252.860001][246.669998][244.779999][229.240005][224.369995][246.880005][245.520004][258.440002][247.740005][254.809998][254.289993][240.910004][244.929993]]To create a target dataset (y) and convert it to a numpy array and get all of the target values except the last \u2018x\u2019 rows days:#Output-[198.449997 197.869995 199.460007 198.779999 198.580002 195.570007199.800003 199.740005 197.919998 201.550003 202.729996 204.410004204.229996 200.020004 201.240005 203.229996 201.75 203.300003205.210007 204.5 203.350006 205.660004 202.589996 207.220001208.839996 208.669998 207.020004 207.740005 209.679993 208.779999213.039993 208.429993 204.020004 193.339996 197. 199.039993203.429993 200.990005 200.479996 208.970001 202.75 201.740005206.5 210.350006 210.360001 212.639999 212.460007 202.639999206.490005 204.160004 205.529999 209.009995 208.740005 205.699997209.190002 213.279999 213.259995 214.169998 216.699997 223.589996223.089996 218.75 219.899994 220.699997 222.770004 220.960007217.729996 218.720001 217.679993 221.029999 219.889999 218.820007223.970001 224.589996 218.960007 220.820007 227.009995 227.059998224.399994 227.029999 230.089996 236.210007 235.869995 235.320007234.369995 235.279999 236.410004 240.509995 239.960007 243.179993243.580002 246.580002 249.050003 243.289993 243.259995 248.759995255.820007 257.5 257.130005 257.23999 259.429993 260.140015262.200012 261.959991 264.470001 262.640015 265.76001 267.100006266.290009 263.190002 262.01001 261.779999 266.369995 264.290009267.839996 267.25 264.160004 259.450012 261.73999 265.579987270.709991 266.920013 268.480011 270.769989 271.459991 275.149994279.859985 280.410004 279.73999 280.019989 279.440002 284.284.269989 289.910004 289.799988 291.519989 293.649994 300.350006297.429993 299.799988 298.390015 303.190002 309.630005 310.329987316.959991 312.679993 311.339996 315.23999 318.730011 316.570007317.700012 319.230011 318.309998 308.950012 317.690002 324.339996323.869995 309.51001 308.660004 318.850006 321.450012 325.209991320.029999 321.549988 319.609985 327.200012 324.869995 324.950012", "link": "https://thecleverprogrammer.com/2020/05/11/stock-price-prediction-with-machine-learning/", "tags": ["Decision Tree", "Linear Regression", "Regression"], "kind": "Project", "ml_libs": ["sklearn"], "host": "thecleverprogrammer.com", "language": "english", "date_project": "2020-05-11 13:57:50", "date_scraped": "2020-12-20 00:00:00", "words": 272, "sentences": 6, "sum_nltk": "", "sum_nltk_words": 1, "sum_nltk_runtime": 0.006, "sum_t5": "this Data Science Project will create a Linear Regression model and a Decision Tree Regression model to Predict Apple\u2019s Stock Price using Machine Learning and Python. 'i'm going to use machine learning to predict the close price of apple's stock', says a researcher. 'i'm going to use machine learning to predict the close price of apple's stock', says a researcher. 'i'm going to use machine learning to predict the close price of apple's stock'", "sum_t5_words": 74, "sum_t5_runtime": 9.644, "runtime": 0.005, "description_category": "Construction & Engineering", "description_category_score": 0.6650557518005371, "description_category_runtime": 84.052, "description_subcategory": "Machine Learning", "description_subcategory_score": 0.8423005938529968, "description_subcategory_runtime": 140.651, "category": "Construction & Engineering", "category_score": 0.6650557518005371, "subcategory": "Machine Learning", "subcategory_score": 0.8423005938529968, "runtime_cat": 224.703, "programming_language": "Python", "ml_score": "1.0", "language_code": "en", "language_score": "0.9999985922237231", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "data science project create linear regression model decision tree regression model predict apple stock price using machine learning pythonimport panda import csv fileto get number training daysoutput training day 251 7to visualize close price datato get close pricecreating variable predict x day futurecreate new target column shifted x unitsdays upto create feature dataset x convert numpy array remove last x rowsdaysoutput 185720001188660004190919998190080002189 18308999618660000618277999917966000417897000117822999617738000517830000317507000717330000317963999918253999318522000119014999419258000219480999819419000219414999419274000519388999919844999719786999519946000719877999919858000219557000719980000319974000519791999820155000320272999620441000420422999620002000420124000520322999620175 2033000032052100072045 203350006205660004202589996207220001208839996208669998207020004207740005209679993208779999213039993208429993204020004193339996197 19903999320342999320099000520047999620897000120275 2017400052065 21035000621036000121263999921246000720263999920649000520416000420552999920900999520874000520569999720919000221327999921325999521416999821669999722358999622308999621875 2198999942206999972227700042209600072177299962187200012176799932210299992198899992188200072239700012245899962189600072208200072270099952270599982243999942270299992300899962362100072358699952353200072343699952352799992364100042405099952399600072431799932435800022465800022490500032432899932432599952487599952558200072575 25713000525723999 25942999326014001526220001226195999126447000126264001526576001 26710000626629000926319000226201001 26177999926636999526429000926783999626725 26416000425945001226173999 26557998727070999126692001326848001127076998927145999127514999427985998528041000427973999 280019989279440002284 28426998928991000428979998829151998929364999430035000629742999329979998829839001530319000230963000531032998731695999131267999331133999631523999 31873001131657000731770001231923001131830999830895001231769000232433999632386999530951001 308660004318850006321450012325209991320029999321549988319609985327200012324869995324950012319 32361999532029998831304998829817999328807998729264999427351998927335998529880999828932000730273999 292920013289029999266170013285339996275429993248229996277970001242210007252860001246669998244779999229240005224369995246880005245520004258440002247740005254809998254289993240910004244929993to create target dataset convert numpy array get target value except last x row daysoutput198449997 197869995 199460007 198779999 198580002 195570007199800003 199740005 197919998 201550003 202729996 204410004204229996 200020004 201240005 203229996 20175 203300003205210007 2045 203350006 205660004 202589996 207220001208839996 208669998 207020004 207740005 209679993 208779999213039993 208429993 204020004 193339996 197 199039993203429993 200990005 200479996 208970001 20275 2017400052065 210350006 210360001 212639999 212460007 202639999206490005 204160004 205529999 209009995 208740005 205699997209190002 213279999 213259995 214169998 216699997 223589996223089996 21875 219899994 220699997 222770004 220960007217729996 218720001 217679993 221029999 219889999 218820007223970001 224589996 218960007 220820007 227009995 227059998224399994 227029999 230089996 236210007 235869995 235320007234369995 235279999 236410004 240509995 239960007 243179993243580002 246580002 249050003 243289993 243259995 248759995255820007 2575 257130005 25723999 259429993 260140015262200012 261959991 264470001 262640015 26576001 267100006266290009 263190002 26201001 261779999 266369995 264290009267839996 26725 264160004 259450012 26173999 265579987270709991 266920013 268480011 270769989 271459991 275149994279859985 280410004 27973999 280019989 279440002 284284269989 289910004 289799988 291519989 293649994 300350006297429993 299799988 298390015 303190002 309630005 310329987316959991 312679993 311339996 31523999 318730011 316570007317700012 319230011 318309998 308950012 317690002 324339996323869995 30951001 308660004 318850006 321450012 325209991320029999 321549988 319609985 327200012 324869995 324950012", "tags_descriptive": ["Decision Tree", "Linear Regression", "Regression"]}