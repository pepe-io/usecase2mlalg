{"title": "Dog and Cat Classification using CNN", "description": "Convolutional neural networks (CNN) are primarily used to classify images or identify pattern similarities between them. So a convolutional network receives a normal color image as a rectangular box whose width and height are measured by the number of pixels along those dimensions, and whose depth is three layers deep, one for each letter in RGB.As images move through a convolutional network, different patterns are recognised just like a normal neural network. But here rather than focussing on one pixel at a time, a convolutional net takes in square patches of pixels and passes them through a\u00a0filter.That filter is also a square matrix smaller than the image itself, and equal in size to the patch. It is also called a\u00a0kernel.We need to train a model first so we will check training data In the below code we are iterating through all images in train folder and then we will split image name with deliminiter \u201c.\u201d We have names like dog.0, dog.1, cat.2 etc.. Hence after splitting we are gonna get results like \u201cdog\u2019, \u201ccat\u201d as category value of the image. To make this example more easy we will consider dog as \u201c1\u201d and cat as \u201c0\u201d.Now every image is actually a set of pixels so how to get our computer know that. Its simple convert all those pixels into an array. So we are going to use here a\u00a0cv2\u00a0library to read our image into an array and also it will read as a gray scale image.Okay so the above code was more for understanding purpose. Nowe we will get to the real part of coding here.Declare your training array X and your target array y. Here X will be the array of pixels and y will be value 0 or 1 indicating its a dog or cat Write convert function to map category \u201cdog\u201d or \u201ccat\u201d into 1 and 0Create a function create_test_data which takes all training images into a loop. Converts into image array. Resize image into 80 X80. Append image into X array. Append category value into y array.Now call the function, but also later convert X and y into numpy array We also have to reshape X with the below codeIf you see the values of X you can see a variety of values between 0- 255 . Its because every pixel has different density of black and white. But with the wide range of values it becomes difficult for a training model to learn ( sometimes memorize ).How to resolve this And you guessed it right . You can\u00a0normalize\u00a0the data. We can use Keras normalize here also . But well we already know all values are having range between 0-255 so we can just divide it by 255 and get all values scaled between 0 -1That\u2019s what we have done below. You can skip this step to see the difference between accuracy. Don\u2019t believe everything I say. Experiment and see for yourself", "link": "https://thecleverprogrammer.com/2020/06/16/dog-and-cat-classification-using-convolutional-neural-networks-cnn/", "tags": ["ReLu", "Classification", "CNN"], "kind": "Project", "ml_libs": ["keras", "pattern", "tensorflow"], "host": "thecleverprogrammer.com", "language": "english", "date_project": "2020-06-16 21:39:43", "date_scraped": "2020-12-20 00:00:00", "words": 486, "sentences": 22, "sum_nltk": "So a convolutional network receives a normal color image as a rectangular box whose width and height are measured by the number of pixels along those dimensions, and whose depth is three layers deep, one for each letter in RGB.As images move through a convolutional network, different patterns are recognised just like a normal neural network.\nIt is also called a\u00a0kernel.We need to train a model first so we will check training data In the below code we are iterating through all images in train folder and then we will split image name with deliminiter \u201c.\u201d We have names like dog.0, dog.1, cat.2 etc..\nHence after splitting we are gonna get results like \u201cdog\u2019, \u201ccat\u201d as category value of the image.\nSo we are going to use here a\u00a0cv2\u00a0library to read our image into an array and also it will read as a gray scale image.Okay so the above code was more for understanding purpose.\nHere X will be the array of pixels and y will be value 0 or 1 indicating its a dog or cat Write convert function to map category \u201cdog\u201d or \u201ccat\u201d into 1 and 0Create a function create_test_data which takes all training images into a loop.\nConverts into image array.", "sum_nltk_words": 200, "sum_nltk_runtime": 0.004, "sum_t5": "convolutional neural networks (CNNs) are primarily used to classify images. they are used to identify patterns similar to a normal neural network. a convolutional net takes in square patches of pixels and passes them through a filter. it is also called a kernel, and is also called a kernel. the code below is a simple example of how to convert an image into a gray scale image. if you want to see a pattern in an image, click here.", "sum_t5_words": 79, "sum_t5_runtime": 6.799, "runtime": 0.003, "nltk_category": "Healthcare", "nltk_category_score": 0.2758959233760834, "nltk_category_runtime": 18.592, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.8802621960639954, "nltk_subcategory_runtime": 29.786, "category": "Healthcare", "category_score": 0.2758959233760834, "subcategory": "Machine Learning", "subcategory_score": 0.8802621960639954, "runtime_cat": 48.379, "programming_language": "Python", "ml_score": "1.0", "language_code": "en", "language_score": "0.9999983018759901", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "convolutional neural network cnn primarily used classify image identify pattern similarity convolutional network receives normal color image rectangular box whose width height measured number pixel along dimension whose depth three layer deep one letter rgbas image move convolutional network different pattern recognised like normal neural network rather focussing one pixel time convolutional net take square patch pixel pass filterthat filter also square matrix smaller image equal size patch also called kernelwe need train model first check training data code iterating image train folder split image name deliminiter name like dog0 dog1 cat2 etc hence splitting gonna get result like dog cat category value image make example easy consider dog 1 cat 0now every image actually set pixel get computer know simple convert pixel array going use cv2 library read image array also read gray scale imageokay code understanding purpose nowe get real part coding heredeclare training array x target array x array pixel value 0 1 indicating dog cat write convert function map category dog cat 1 0create function create_test_data take training image loop convert image array resize image 80 x80 append image x array append category value arraynow call function also later convert x numpy array also reshape x codeif see value x see variety value 0 255 every pixel different density black white wide range value becomes difficult training model learn sometimes memorize resolve guessed right normalize data use kera normalize also well already know value range 0255 divide 255 get value scaled 0 1thats done skip step see difference accuracy dont believe everything say experiment see", "tags_descriptive": ["Rectified Linear Unit (ReLU)", "Classification", "Convolutional Neural Network (CNN)"]}