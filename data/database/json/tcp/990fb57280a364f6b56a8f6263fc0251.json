{"title": "Image Processing with Machine Learning and Python", "description": "Using the HOG features of Machine Learning, we can build up a simple facial detection algorithm with any Image processing estimator,  here we will use a linear support vector machine, and it\u2019s steps are as follows:Let\u2019s go through these steps and try it out: Let\u2019s start by finding some positive training samples for Image processing, that show a variety of faces. We have one easy set of data to work with, the Labeled Faces in the Wild dataset, which can be downloaded by Scikit-Learn:#Output- (3185, 62, 47)This gives us a sample of more 13,000 face images to use for training.Next we need a set of similarly sized thumbnails that do not have a face in them. One way to do this is to take any corpus of input images, and extract thumbnails from them at a variety of scales. Here we can use some of the images shipped with Scikit-Image, along with Scikit-Learn\u2019s PatchExtractor:#Output- (30000, 62, 47)We now have 30,000 suitable image patches that do not contain faces. Let\u2019s take a look at a few of them to get an idea of what they look like:My hope is that these would sufficiently cover the space of \u201cnonfaces\u201d that our algorithm is likely to see.Now that we have these positive samples and negative samples, we can combine them and compute HOG features. This step takes a little while, because the HOG features involve a nontrivial computation for each image:#Output- (33185, 1215)We are left with 33,185 training samples in 1,215 dimensions, and we now have our data in a form that we can feed into Scikit-Learn.Next we use the tools to create a classifier of thumbnail patches. For such a high-dimensional binary classification task, a linear support vector machine is a good choice. We will use Scikit-Learn\u2019s Linear SVC, because in comparison to SVC it often has better scaling for large number of samples.First, though, let\u2019s use a simple Gaussian naive Bayes to get a quick baseline:#Output- array([0.96112702, 0.986741 , 0.98900105, 0.99261715, 0.98885038])We see that on our training data, even a simple naive Bayes algorithm gets us upward of 90% accuracy. Let\u2019s try the support vector machine, with a grid search over a few choices of the C parameter:#Output- 0.9934910351062227#Output- {\u2018C\u2019: 1.0}Let\u2019s take the best estimator and retrain it on the full dataset:Now that we have this model in place, let\u2019s grab a new image and see how the model does. We will use one portion of the astronaut image for simplicity and run a sliding window over it and evaluate each patch.Next, let\u2019s create a window that iterates over patches of this image, and compute HOG features for each patch:#Output- (1911, 1215)Finally, we can take these HOG-featured patches and use our model to evaluate whether each patch contains a face:#output- 36.0We see that out of nearly 2,000 patches, we have found 36 detections.  Let\u2019s use the information we have about these patches to show where they lie on our test image, drawing them as rectangles:All of the detected patches overlap and found the face in the image! Not bad for a few lines of Python. I hope you liked this article on Image Processing. Feel free to ask your valuable questions in the comments section below.", "link": "https://thecleverprogrammer.com/2020/06/25/image-processing-with-machine-learning-and-python/", "tags": ["Naive Bayes", "Classification", "CV"], "kind": "Project", "ml_libs": ["sklearn", "skimage"], "host": "thecleverprogrammer.com", "language": "english", "date_project": "2020-06-25 00:00:26", "date_scraped": "2020-12-20 00:00:00", "words": 537, "sentences": 13, "sum_nltk": "Using the HOG features of Machine Learning, we can build up a simple facial detection algorithm with any Image processing estimator,  here we will use a linear support vector machine, and it\u2019s steps are as follows:Let\u2019s go through these steps and try it out: Let\u2019s start by finding some positive training samples for Image processing, that show a variety of faces.\nWe have one easy set of data to work with, the Labeled Faces in the Wild dataset, which can be downloaded by Scikit-Learn:#Output- (3185, 62, 47)This gives us a sample of more 13,000 face images to use for training.Next we need a set of similarly sized thumbnails that do not have a face in them.\nThis step takes a little while, because the HOG features involve a nontrivial computation for each image:#Output- (33185, 1215)We are left with 33,185 training samples in 1,215 dimensions, and we now have our data in a form that we can feed into Scikit-Learn.Next we use the tools to create a classifier of thumbnail patches.\nWe will use Scikit-Learn\u2019s Linear SVC, because in comparison to SVC it often has better scaling for large number of samples.First, though, let\u2019s use a simple Gaussian naive Bayes to get a quick baseline:#Output- array([0.96112702, 0.986741 , 0.98900105, 0.99261715, 0.98885038])We see that on our training data, even a simple naive Bayes algorithm gets us upward of 90% accuracy.", "sum_nltk_words": 226, "sum_nltk_runtime": 0.004, "sum_t5": "a linear support vector machine can be used to build up a simple facial detection algorithm. we will use the HOG features of Machine Learning to build up a simple facial detection algorithm. we will use a simple Gaussian naive Bayes to get a quick baseline. we will then use a classifier to classify thumbnail patches. a linear support vector machine is a good choice for such a high-dimensional binary binary classification task.", "sum_t5_words": 73, "sum_t5_runtime": 6.536, "runtime": 0.004, "nltk_category": "Education & Research", "nltk_category_score": 0.21890559792518616, "nltk_category_runtime": 24.171, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.993662416934967, "nltk_subcategory_runtime": 39.024, "category": "Education & Research", "category_score": 0.21890559792518616, "subcategory": "Machine Learning", "subcategory_score": 0.993662416934967, "runtime_cat": 63.195, "programming_language": "Python", "ml_score": "1.0", "language_code": "en", "language_score": "0.9999974914839611", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "using hog feature machine learning build simple facial detection algorithm image processing estimator use linear support vector machine step followslets go step try let start finding positive training sample image processing show variety face one easy set data work labeled face wild dataset downloaded scikitlearnoutput 3185 62 47this give u sample 13000 face image use trainingnext need set similarly sized thumbnail face one way take corpus input image extract thumbnail variety scale use image shipped scikitimage along scikitlearns patchextractoroutput 30000 62 47we 30000 suitable image patch contain face let take look get idea look likemy hope would sufficiently cover space nonfaces algorithm likely seenow positive sample negative sample combine compute hog feature step take little hog feature involve nontrivial computation imageoutput 33185 1215we left 33185 training sample 1215 dimension data form feed scikitlearnnext use tool create classifier thumbnail patch highdimensional binary classification task linear support vector machine good choice use scikitlearns linear svc comparison svc often better scaling large number samplesfirst though let use simple gaussian naive bayes get quick baselineoutput array096112702 0986741 098900105 099261715 098885038we see training data even simple naive bayes algorithm get u upward 90 accuracy let try support vector machine grid search choice c parameteroutput 09934910351062227output c 10lets take best estimator retrain full datasetnow model place let grab new image see model use one portion astronaut image simplicity run sliding window evaluate patchnext let create window iterates patch image compute hog feature patchoutput 1911 1215finally take hogfeatured patch use model evaluate whether patch contains faceoutput 360we see nearly 2000 patch found 36 detection let use information patch show lie test image drawing rectanglesall detected patch overlap found face image bad line python hope liked article image processing feel free ask valuable question comment section", "tags_descriptive": ["Naive Bayes", "Classification", "Computer Vision (CV)"]}