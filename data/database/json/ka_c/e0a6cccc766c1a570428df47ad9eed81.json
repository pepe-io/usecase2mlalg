{"title": "Instant Gratification", "description": "A synchronous Kernels-only competitionWelcome to Instant (well, almost) Gratification! In 2015, Kaggle introduced Kernels as a resource to competition participants. It was a controversial decision to add a code-sharing tool to a competitive coding space. We thought it was important to make Kaggle more than a place where competitions are solved behind closed digital doors. Since then, Kernels has grown from its infancy--essentially a blinking cursor in a docker container--into its teenage years. We now have more compute, longer runtimes, better datasets, GPUs, and an improved interface. We have iterated and tested several Kernels-only (KO) competition formats with a true holdout test set, in particular deploying them when we would have otherwise substituted a two-stage competition. However, the experience of submitting to a Kernels-only competition has typically been asynchronous and imperfect; participants wait many days after a competition has concluded for their selected Kernels to be rerun on the holdout test dataset, the leaderboard updated, and the winners announced. This flow causes heartbreak to participants whose Kernels fail on the unseen test set, leaving them with no way to correct tiny errors that spoil months of hard work. Say Hello to Synchronous KO We're now pleased to announce general support for a synchronous Kernels-only format. When you submit from a Kernel, Kaggle will run the code against both the public test set and private test set in real time. This small-but-substantial tweak improves the experience for participants, the host, and Kaggle:  With a truly withheld test set, we are practicing proper, rigorous machine learning. We will be able to offer more varieties of competitions and intend to run many fewer confusing two-stage competitions. You will be able to see if your code runs successfully on the withheld test set and have the leeway to intervene if it fails. We will run all submissions against the private data, not just selected ones. Participants will get the complete and familiar public/private scores available in a traditional competition. The final leaderboard can be released at the end of the competition, without the delay of rerunning Kernels.  This competition is a low-stakes, trial-run introduction to our new synchronous KO implementation. We want to test that the process goes smoothly and gather feedback on your experiences. While it may feel like a normal KO competition, there are complicated new mechanics in play, such as the selection logic of Kernels that are still running when the deadline passes. Since the competition also presents an authentic machine learning problem, it will also award Kaggle medals and points. Have fun, good luck, and welcome to the world of synchronous Kernels competitions!", "link": "https://www.kaggle.com/c/instant-gratification", "tags": [], "kind": ["Project", "(Competition)", "(Dataset)"], "host": "kaggle.com", "date_project": "2019-06-21 01:59:00", "words": 435, "sentences": 21, "sum_nltk": "We have iterated and tested several Kernels-only (KO) competition formats with a true holdout test set, in particular deploying them when we would have otherwise substituted a two-stage competition.\nHowever, the experience of submitting to a Kernels-only competition has typically been asynchronous and imperfect; participants wait many days after a competition has concluded for their selected Kernels to be rerun on the holdout test dataset, the leaderboard updated, and the winners announced.\nThis flow causes heartbreak to participants whose Kernels fail on the unseen test set, leaving them with no way to correct tiny errors that spoil months of hard work.\nWhen you submit from a Kernel, Kaggle will run the code against both the public test set and private test set in real time.\nThis small-but-substantial tweak improves the experience for participants, the host, and Kaggle:  With a truly withheld test set, we are practicing proper, rigorous machine learning.\nYou will be able to see if your code runs successfully on the withheld test set and have the leeway to intervene if it fails.\nParticipants will get the complete and familiar public/private scores available in a traditional competition.\nThis competition is a low-stakes, trial-run introduction to our new synchronous KO implementation.", "sum_nltk_words": 196, "sum_nltk_runtime": 0.006, "sum_t5": "synchronous Kernels-only competitions are now available on Kaggle. participants submit code against public and private test sets in real time. the final leaderboard can be released at the end of the competition. the competition is open to all participants. if you have any questions, please contact kakaggle@kakaggle.com. if you have any questions, please contact kakaggle@kakaggle.com.", "sum_t5_words": 55, "sum_t5_runtime": 6.353, "runtime": 0.005, "nltk_category": "Utilities", "nltk_category_score": 0.3079596757888794, "nltk_category_runtime": 18.262, "nltk_subcategory": "Machine Learning", "nltk_subcategory_score": 0.49073848128318787, "nltk_subcategory_runtime": 29.373, "category": "Utilities", "category_score": 0.3079596757888794, "subcategory": "Machine Learning", "subcategory_score": 0.49073848128318787, "runtime_cat": 47.637, "engagement_score": "0.676", "language_code": "en", "language": "english", "language_score": "0.9999945216068737", "learn_score": 1, "explore_score": 0, "compete_score": 0, "description_lemmatized": "synchronous kernelsonly competitionwelcome instant well almost gratification 2015 kaggle introduced kernel resource competition participant controversial decision add codesharing tool competitive coding space thought important make kaggle place competition solved behind closed digital door since kernel grown infancyessentially blinking cursor docker containerinto teenage year compute longer runtimes better datasets gpus improved interface iterated tested several kernelsonly ko competition format true holdout test set particular deploying would otherwise substituted twostage competition however experience submitting kernelsonly competition typically asynchronous imperfect participant wait many day competition concluded selected kernel rerun holdout test dataset leaderboard updated winner announced flow cause heartbreak participant whose kernel fail unseen test set leaving way correct tiny error spoil month hard work say hello synchronous ko pleased announce general support synchronous kernelsonly format submit kernel kaggle run code public test set private test set real time smallbutsubstantial tweak improves experience participant host kaggle truly withheld test set practicing proper rigorous machine learning able offer variety competition intend run many fewer confusing twostage competition able see code run successfully withheld test set leeway intervene fails run submission private data selected one participant get complete familiar publicprivate score available traditional competition final leaderboard released end competition without delay rerunning kernel competition lowstakes trialrun introduction new synchronous ko implementation want test process go smoothly gather feedback experience may feel like normal ko competition complicated new mechanic play selection logic kernel still running deadline pass since competition also present authentic machine learning problem also award kaggle medal point fun good luck welcome world synchronous kernel competition", "tags_descriptive": []}